# Took orginal tfl open api spec ( https://api.tfl.gov.uk/swagger/docs/v1 ) then
# 1) updated server to https://api.tfl.gov.uk/
# 2) converted from v2 to v3 of openapi spec ( https://converter.swagger.io/ )
# 3) converted from json to yaml ( https://www.json2yaml.com/ )
# 4) updated duplicate operationIds
# 5) updated path/query parameters references
# 6) applied default OpenAPI specification linting rules
# 7) tidy summary/description via python script, then run through openapi-format ( https://github.com/thim81/openapi-format )
# 8) removed v from version number
#
# update by Mark Sivill Jan 2023
#
openapi: 3.0.1
info:
  contact:
    name: Mark Sivill - Kong
  description: Transport for London Unified API
  title: Transport for London
  version: '1.5'
servers:
  - url: 'https://api.tfl.gov.uk'
paths:
  '/AccidentStats/{year}':
    get:
      operationId: AccidentStats_Get
      summary: Gets all accident details by year
      description: Gets all accident details for accidents occuring in the specified year
      parameters:
        - name: year
          in: path
          description: The year for which to filter the accidents on.
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.AccidentStats.AccidentDetail'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.AccidentStats.AccidentDetail'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.AccidentStats.AccidentDetail'
            text/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.AccidentStats.AccidentDetail'
      deprecated: false
      tags:
        - AccidentStats
  /AirQuality:
    get:
      operationId: AirQuality_Get
      summary: Gets air quality
      description: Gets air quality data feed
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/System.Object'
            application/xml:
              schema:
                $ref: '#/components/schemas/System.Object'
            text/json:
              schema:
                $ref: '#/components/schemas/System.Object'
            text/xml:
              schema:
                $ref: '#/components/schemas/System.Object'
      deprecated: false
      tags:
        - AirQuality
  /BikePoint:
    get:
      operationId: BikePoint_GetAll
      summary: Gets all bike point locations
      description: Gets all bike point locations. The Place object has an addtionalProperties array which contains the nbBikes, nbDocks and nbSpaces numbers which give the status of the BikePoint. A mismatch in these numbers i.e. nbDocks - (nbBikes + nbSpaces) != 0 indicates broken docks.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.Place'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.Place'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.Place'
            text/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.Place'
      deprecated: false
      tags:
        - BikePoint
  /BikePoint/Search:
    get:
      operationId: BikePoint_Search
      summary: Search for bike stations by name
      description: 'Search for bike stations by their name, a bike point''s name often contains information about the name of the street or nearby landmarks, for example. Note that the search result does not contain the PlaceProperties i.e. the status or occupancy of the BikePoint, to get that information you should retrieve the BikePoint by its id on /BikePoint/id.'
      parameters:
        - name: query
          in: query
          description: The search term e.g. "St. James"
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.Place'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.Place'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.Place'
            text/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.Place'
      deprecated: false
      tags:
        - BikePoint
  '/BikePoint/{id}':
    get:
      operationId: BikePoint_Get
      summary: Gets the bike point by id.
      description: Gets the bike point with the given id.
      parameters:
        - name: id
          in: path
          description: A bike point id (a list of ids can be obtained from the above BikePoint call)
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.Place'
            application/xml:
              schema:
                $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.Place'
            text/json:
              schema:
                $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.Place'
            text/xml:
              schema:
                $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.Place'
      deprecated: false
      tags:
        - BikePoint
  /Cabwise/search:
    get:
      operationId: Cabwise_Get
      summary: Gets taxis and minicabs information
      description: Gets taxis and minicabs contact information
      parameters:
        - name: lat
          in: query
          description: Latitude
          required: true
          schema:
            type: number
            format: double
        - name: lon
          in: query
          description: Longitude
          required: true
          schema:
            type: number
            format: double
        - name: optype
          in: query
          description: 'Operator Type e.g Minicab, Executive, Limousine'
          schema:
            type: string
        - name: wc
          in: query
          description: Wheelchair accessible
          schema:
            type: string
        - name: radius
          in: query
          description: The radius of the bounding circle in metres
          schema:
            type: number
            format: double
        - name: name
          in: query
          description: Trading name of operating company
          schema:
            type: string
        - name: maxResults
          in: query
          description: An optional parameter to limit the number of results return. Default and maximum is 20.
          schema:
            type: integer
            format: int32
        - name: legacyFormat
          in: query
          description: Legacy Format
          schema:
            type: boolean
        - name: forceXml
          in: query
          description: Force Xml
          schema:
            type: boolean
        - name: twentyFourSevenOnly
          in: query
          description: Twenty Four Seven Only
          schema:
            type: boolean
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/System.Object'
            application/xml:
              schema:
                $ref: '#/components/schemas/System.Object'
            text/json:
              schema:
                $ref: '#/components/schemas/System.Object'
            text/xml:
              schema:
                $ref: '#/components/schemas/System.Object'
      deprecated: false
      tags:
        - Cabwise
  '/Journey/JourneyResults/{from}/to/{to}':
    get:
      operationId: Journey_JourneyResults
      summary: Perform a Journey Planner search
      description: Perform a Journey Planner search from the parameters specified in simple types
      parameters:
        - name: from
          in: path
          description: 'Origin of the journey. Can be WGS84 coordinates expressed as "lat,long", a UK postcode, a Naptan (StopPoint) id, an ICS StopId, or a free-text string (will cause disambiguation unless it exactly matches a point of interest name).'
          required: true
          schema:
            type: string
        - name: to
          in: path
          description: 'Destination of the journey. Can be WGS84 coordinates expressed as "lat,long", a UK postcode, a Naptan (StopPoint) id, an ICS StopId, or a free-text string (will cause disambiguation unless it exactly matches a point of interest name).'
          required: true
          schema:
            type: string
        - name: via
          in: query
          description: 'Travel through point on the journey. Can be WGS84 coordinates expressed as "lat,long", a UK postcode, a Naptan (StopPoint) id, an ICS StopId, or a free-text string (will cause disambiguation unless it exactly matches a point of interest name).'
          schema:
            type: string
        - name: nationalSearch
          in: query
          description: Does the journey cover stops outside London? eg. "nationalSearch=true"
          schema:
            type: boolean
        - name: date
          in: query
          description: The date must be in yyyyMMdd format
          schema:
            type: string
        - name: time
          in: query
          description: The time must be in HHmm format
          schema:
            type: string
        - name: timeIs
          in: query
          description: 'Does the time given relate to arrival or leaving time? Possible options: "departing" | "arriving"'
          schema:
            type: string
            enum:
              - Arriving
              - Departing
        - name: journeyPreference
          in: query
          description: 'The journey preference eg possible options: "leastinterchange" | "leasttime" | "leastwalking"'
          schema:
            type: string
            enum:
              - LeastInterchange
              - LeastTime
              - LeastWalking
        - name: mode
          in: query
          description: 'The mode must be a comma separated list of modes. eg possible options: "public-bus,overground,train,tube,coach,dlr,cablecar,tram,river,walking,cycle"'
          schema:
            type: array
            items:
              type: string
          explode: true
          style: form
        - name: accessibilityPreference
          in: query
          description: 'The accessibility preference must be a comma separated list eg. "noSolidStairs,noEscalators,noElevators,stepFreeToVehicle,stepFreeToPlatform"'
          schema:
            type: array
            items:
              enum:
                - NoRequirements
                - NoSolidStairs
                - NoEscalators
                - NoElevators
                - StepFreeToVehicle
                - StepFreeToPlatform
              type: string
          explode: true
          style: form
        - name: fromName
          in: query
          description: An optional name to associate with the origin of the journey in the results.
          schema:
            type: string
        - name: toName
          in: query
          description: An optional name to associate with the destination of the journey in the results.
          schema:
            type: string
        - name: viaName
          in: query
          description: An optional name to associate with the via point of the journey in the results.
          schema:
            type: string
        - name: maxTransferMinutes
          in: query
          description: The max walking time in minutes for transfer eg. "120"
          schema:
            type: string
        - name: maxWalkingMinutes
          in: query
          description: The max walking time in minutes for journeys eg. "120"
          schema:
            type: string
        - name: walkingSpeed
          in: query
          description: 'The walking speed. eg possible options: "slow" | "average" | "fast".'
          schema:
            type: string
            enum:
              - Slow
              - Average
              - Fast
        - name: cyclePreference
          in: query
          description: 'The cycle preference. eg possible options: "allTheWay" | "leaveAtStation" | "takeOnTransport" | "cycleHire"'
          schema:
            type: string
            enum:
              - None
              - LeaveAtStation
              - TakeOnTransport
              - AllTheWay
              - CycleHire
        - name: adjustment
          in: query
          description: 'Time adjustment command. eg possible options: "TripFirst" | "TripLast"'
          schema:
            type: string
        - name: bikeProficiency
          in: query
          description: 'A comma separated list of cycling proficiency levels. eg possible options: "easy,moderate,fast"'
          schema:
            type: array
            items:
              enum:
                - Easy
                - Moderate
                - Fast
              type: string
          explode: true
          style: form
        - name: alternativeCycle
          in: query
          description: Option to determine whether to return alternative cycling journey
          schema:
            type: boolean
        - name: alternativeWalking
          in: query
          description: Option to determine whether to return alternative walking journey
          schema:
            type: boolean
        - name: applyHtmlMarkup
          in: query
          description: Flag to determine whether certain text (e.g. walking instructions) should be output with HTML tags or not.
          schema:
            type: boolean
        - name: useMultiModalCall
          in: query
          description: 'A boolean to indicate whether or not to return 3 public transport journeys, a bus journey, a cycle hire journey, a personal cycle journey and a walking journey'
          schema:
            type: boolean
        - name: walkingOptimization
          in: query
          description: A boolean to indicate whether to optimize journeys using walking
          schema:
            type: boolean
        - name: taxiOnlyTrip
          in: query
          description: 'A boolean to indicate whether to return one or more taxi journeys. Note, setting this to true will override "useMultiModalCall".'
          schema:
            type: boolean
        - name: routeBetweenEntrances
          in: query
          description: A boolean to indicate whether public transport routes should include directions between platforms and station entrances.
          schema:
            type: boolean
        - name: useRealTimeLiveArrivals
          in: query
          description: A boolean to indicate if we want to receive real time live arrivals data where available.
          schema:
            type: boolean
        - name: calcOneDirection
          in: query
          description: 'A boolean to make Journey Planner calculate journeys in one temporal direction only. In other words, only calculate journeys after the ''depart'' time, or before the ''arrive'' time. By default, the Journey Planner engine (EFA) calculates journeys in both temporal directions.'
          schema:
            type: boolean
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.JourneyPlanner.ItineraryResult'
            application/xml:
              schema:
                $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.JourneyPlanner.ItineraryResult'
            text/json:
              schema:
                $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.JourneyPlanner.ItineraryResult'
            text/xml:
              schema:
                $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.JourneyPlanner.ItineraryResult'
      deprecated: false
      tags:
        - Journey
  /Journey/Meta/Modes:
    get:
      operationId: Journey_Meta
      summary: List journey planner modes
      description: Gets a list of all of the available journey planner modes
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.Mode'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.Mode'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.Mode'
            text/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.Mode'
      deprecated: false
      tags:
        - Journey
  /Line/Meta/DisruptionCategories:
    get:
      operationId: Line_MetaDisruptionCategories
      summary: List disruption categories
      description: Gets a list of valid disruption categories
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
            application/xml:
              schema:
                type: array
                items:
                  type: string
            text/json:
              schema:
                type: array
                items:
                  type: string
            text/xml:
              schema:
                type: array
                items:
                  type: string
      deprecated: false
      tags:
        - Line
  /Line/Meta/Modes:
    get:
      operationId: Line_MetaModes
      summary: List of valid modes
      description: Gets a list of valid modes
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.Mode'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.Mode'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.Mode'
            text/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.Mode'
      deprecated: false
      tags:
        - Line
  /Line/Meta/ServiceTypes:
    get:
      operationId: Line_MetaServiceTypes
      summary: List ServiceTypes
      description: Gets a list of valid ServiceTypes to filter on
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
            application/xml:
              schema:
                type: array
                items:
                  type: string
            text/json:
              schema:
                type: array
                items:
                  type: string
            text/xml:
              schema:
                type: array
                items:
                  type: string
      deprecated: false
      tags:
        - Line
  /Line/Meta/Severity:
    get:
      operationId: Line_MetaSeverity
      summary: List severity codes
      description: Gets a list of valid severity codes
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.StatusSeverity'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.StatusSeverity'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.StatusSeverity'
            text/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.StatusSeverity'
      deprecated: false
      tags:
        - Line
  '/Line/Mode/{modes}':
    get:
      operationId: Line_GetByMode
      summary: Gets lines by modes.
      description: Gets lines that serve the given modes.
      parameters:
        - name: modes
          in: path
          description: 'A comma-separated list of modes e.g. tube,dlr'
          required: true
          schema:
            type: array
            items:
              type: string
          explode: false
          style: simple
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.Line'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.Line'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.Line'
            text/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.Line'
      deprecated: false
      tags:
        - Line
  '/Line/Mode/{modes}/Disruption':
    get:
      operationId: Line_DisruptionByMode
      summary: Get disruptions for lines by modes.
      description: Get disruptions for all lines of the given modes.
      parameters:
        - name: modes
          in: path
          description: 'A comma-separated list of modes e.g. tube,dlr'
          required: true
          schema:
            type: array
            items:
              type: string
          explode: false
          style: simple
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.Disruption'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.Disruption'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.Disruption'
            text/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.Disruption'
      deprecated: false
      tags:
        - Line
  '/Line/Mode/{modes}/Route':
    get:
      operationId: Line_RouteByMode
      summary: Gets lines and routes by modes
      description: 'Gets all lines and their valid routes for given modes, including the name and id of the originating and terminating stops for each route'
      parameters:
        - name: modes
          in: path
          description: 'A comma-separated list of modes e.g. tube,dlr'
          required: true
          schema:
            type: array
            items:
              type: string
          explode: false
          style: simple
        - name: serviceTypes
          in: query
          description: 'A comma seperated list of service types to filter on. Supported values: Regular, Night. Defaulted to ''Regular'' if not specified'
          schema:
            type: array
            items:
              enum:
                - Regular
                - Night
              type: string
          explode: true
          style: form
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.Line'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.Line'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.Line'
            text/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.Line'
      deprecated: false
      tags:
        - Line
  '/Line/Mode/{modes}/Status':
    get:
      operationId: Line_StatusByMode
      summary: Get line status by modes
      description: Gets the line status of for all lines for the given modes
      parameters:
        - name: modes
          in: path
          description: 'A comma-separated list of modes to filter by. e.g. tube,dlr'
          required: true
          schema:
            type: array
            items:
              type: string
          explode: false
          style: simple
        - name: detail
          in: query
          description: Include details of the disruptions that are causing the line status including the affected stops and routes
          schema:
            type: boolean
        - name: severityLevel
          in: query
          description: 'If specified, ensures that only those line status(es) are returned within the lines that have disruptions with the matching severity level.'
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.Line'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.Line'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.Line'
            text/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.Line'
      deprecated: false
      tags:
        - Line
  /Line/Route:
    get:
      operationId: Line_Route
      summary: Get all routes for all lines
      description: 'Get all valid routes for all lines, including the name and id of the originating and terminating stops for each route.'
      parameters:
        - name: serviceTypes
          in: query
          description: 'A comma seperated list of service types to filter on. Supported values: Regular, Night. Defaulted to ''Regular'' if not specified'
          schema:
            type: array
            items:
              enum:
                - Regular
                - Night
              type: string
          explode: true
          style: form
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.Line'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.Line'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.Line'
            text/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.Line'
      deprecated: false
      tags:
        - Line
  '/Line/Search/{query}':
    get:
      operationId: Line_Search
      summary: Search for lines or routes
      description: Search for lines or routes matching the query string
      parameters:
        - name: query
          in: path
          description: Search term e.g victoria
          required: true
          schema:
            type: string
        - name: modes
          in: query
          description: Optionally filter by the specified modes
          schema:
            type: array
            items:
              type: string
          explode: true
          style: form
        - name: serviceTypes
          in: query
          description: 'A comma seperated list of service types to filter on. Supported values: Regular, Night. Defaulted to ''Regular'' if not specified'
          schema:
            type: array
            items:
              enum:
                - Regular
                - Night
              type: string
          explode: true
          style: form
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.RouteSearchResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.RouteSearchResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.RouteSearchResponse'
            text/xml:
              schema:
                $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.RouteSearchResponse'
      deprecated: false
      tags:
        - Line
  '/Line/Status/{severity}':
    get:
      operationId: Line_StatusBySeverity
      summary: Gets line status by severity
      description: Gets the line status for all lines with a given severity A list of valid severity codes can be obtained from a call to Line/Meta/Severity
      parameters:
        - name: severity
          in: path
          description: 'The level of severity (eg: a number from 0 to 14)'
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.Line'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.Line'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.Line'
            text/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.Line'
      deprecated: false
      tags:
        - Line
  '/Line/{ids}':
    get:
      operationId: Line_Get
      summary: Gets lines by ids.
      description: Gets lines that match the specified line ids.
      parameters:
        - name: ids
          in: path
          description: 'A comma-separated list of line ids e.g. victoria,circle,N133. Max. approx. 20 ids.'
          required: true
          schema:
            type: array
            items:
              type: string
          explode: false
          style: simple
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.Line'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.Line'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.Line'
            text/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.Line'
      deprecated: false
      tags:
        - Line
  '/Line/{ids}/Arrivals/{stopPointId}':
    get:
      operationId: Line_Arrivals
      summary: Get list of arrival predictions by line ids and given stop
      description: Get the list of arrival predictions for given line ids based at the given stop
      parameters:
        - name: ids
          in: path
          description: 'A comma-separated list of line ids e.g. victoria,circle,N133. Max. approx. 20 ids.'
          required: true
          schema:
            type: array
            items:
              type: string
          explode: false
          style: simple
        - name: stopPointId
          in: path
          description: 'Optional. Id of stop to get arrival predictions for (station naptan code e.g. 940GZZLUASL, you can use /StopPoint/Search/{query} endpoint to find a stop point id from a station name)'
          required: true
          schema:
            type: string
        - name: direction
          in: query
          description: 'Optional. The direction of travel. Can be inbound or outbound or all. If left blank, and destinationStopId is set, will default to all'
          schema:
            type: string
            enum:
              - inbound
              - outbound
              - all
        - name: destinationStationId
          in: query
          description: Optional. Id of destination stop
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.Prediction'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.Prediction'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.Prediction'
            text/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.Prediction'
      deprecated: false
      tags:
        - Line
  '/Line/{ids}/Disruption':
    get:
      operationId: Line_Disruption
      summary: Get disruptions by line ids
      description: Get disruptions for the given line ids
      parameters:
        - name: ids
          in: path
          description: 'A comma-separated list of line ids e.g. victoria,circle,N133. Max. approx. 20 ids.'
          required: true
          schema:
            type: array
            items:
              type: string
          explode: false
          style: simple
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.Disruption'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.Disruption'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.Disruption'
            text/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.Disruption'
      deprecated: false
      tags:
        - Line
  '/Line/{ids}/Route':
    get:
      operationId: Line_LineRoutesByIds
      summary: Get routes by line ids
      description: 'Get all valid routes for given line ids, including the name and id of the originating and terminating stops for each route.'
      parameters:
        - name: ids
          in: path
          description: 'A comma-separated list of line ids e.g. victoria,circle,N133. Max. approx. 20 ids.'
          required: true
          schema:
            type: array
            items:
              type: string
          explode: false
          style: simple
        - name: serviceTypes
          in: query
          description: 'A comma seperated list of service types to filter on. Supported values: Regular, Night. Defaulted to ''Regular'' if not specified'
          schema:
            type: array
            items:
              enum:
                - Regular
                - Night
              type: string
          explode: true
          style: form
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.Line'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.Line'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.Line'
            text/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.Line'
      deprecated: false
      tags:
        - Line
  '/Line/{ids}/Status':
    get:
      operationId: Line_StatusByIds
      summary: Gets line status by line ids e.g Minor Delays
      description: Gets the line status of for given line ids e.g Minor Delays
      parameters:
        - name: ids
          in: path
          description: 'A comma-separated list of line ids e.g. victoria,circle,N133. Max. approx. 20 ids.'
          required: true
          schema:
            type: array
            items:
              type: string
          explode: false
          style: simple
        - name: detail
          in: query
          description: Include details of the disruptions that are causing the line status including the affected stops and routes
          schema:
            type: boolean
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.Line'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.Line'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.Line'
            text/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.Line'
      deprecated: false
      tags:
        - Line
  '/Line/{ids}/Status/{startDate}/to/{endDate}':
    get:
      operationId: Line_Status
      summary: Gets line status by line ids and provided dates e.g Minor Delays
      description: Gets the line status for given line ids during the provided dates e.g Minor Delays
      parameters:
        - name: ids
          in: path
          description: 'A comma-separated list of line ids e.g. victoria,circle,N133. Max. approx. 20 ids.'
          required: true
          schema:
            type: array
            items:
              type: string
          explode: false
          style: simple
        - name: detail
          in: query
          description: Include details of the disruptions that are causing the line status including the affected stops and routes
          schema:
            type: boolean
        - name: startDate
          in: path
          required: true
          schema:
            type: string
            format: date-time
        - name: endDate
          in: path
          required: true
          schema:
            type: string
            format: date-time
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.Line'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.Line'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.Line'
            text/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.Line'
      deprecated: false
      tags:
        - Line
  '/Line/{id}/Route/Sequence/{direction}':
    get:
      operationId: Line_RouteSequence
      summary: Gets routes by line id
      description: 'Gets all valid routes for given line id, including the sequence of stops on each route.'
      parameters:
        - name: id
          in: path
          description: A single line id e.g. victoria
          required: true
          schema:
            type: string
        - name: direction
          in: path
          description: The direction of travel. Can be inbound or outbound.
          required: true
          schema:
            type: string
            enum:
              - inbound
              - outbound
              - all
        - name: serviceTypes
          in: query
          description: 'A comma seperated list of service types to filter on. Supported values: Regular, Night. Defaulted to ''Regular'' if not specified'
          schema:
            type: array
            items:
              enum:
                - Regular
                - Night
              type: string
          explode: true
          style: form
        - name: excludeCrowding
          in: query
          description: That excludes crowding from line disruptions. Can be true or false.
          schema:
            type: boolean
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.RouteSequence'
            application/xml:
              schema:
                $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.RouteSequence'
            text/json:
              schema:
                $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.RouteSequence'
            text/xml:
              schema:
                $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.RouteSequence'
      deprecated: false
      tags:
        - Line
  '/Line/{id}/StopPoints':
    get:
      operationId: Line_StopPoints
      summary: Gets stations that by line id
      description: Gets a list of the stations that serve the given line id
      parameters:
        - name: id
          in: path
          description: A single line id e.g. victoria
          required: true
          schema:
            type: string
        - name: tflOperatedNationalRailStationsOnly
          in: query
          description: 'If the national-rail line is requested, this flag will filter the national rail stations so that only those operated by TfL are returned'
          schema:
            type: boolean
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.StopPoint'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.StopPoint'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.StopPoint'
            text/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.StopPoint'
      deprecated: false
      tags:
        - Line
  '/Line/{id}/Timetable/{fromStopPointId}':
    get:
      operationId: Line_Timetable
      summary: Gets timetable by station and line
      description: Gets the timetable for a specified station on the give line
      parameters:
        - name: fromStopPointId
          in: path
          description: 'The originating station''s stop point id (station naptan code e.g. 940GZZLUASL, you can use /StopPoint/Search/{query} endpoint to find a stop point id from a station name)'
          required: true
          schema:
            type: string
        - name: id
          in: path
          description: A single line id e.g. victoria
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.TimetableResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.TimetableResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.TimetableResponse'
            text/xml:
              schema:
                $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.TimetableResponse'
      deprecated: false
      tags:
        - Line
  '/Line/{id}/Timetable/{fromStopPointId}/to/{toStopPointId}':
    get:
      operationId: Line_TimetableTo
      summary: Gets timetable by station and line and destination
      description: Gets the timetable for a specified station on the give line with specified destination
      parameters:
        - name: fromStopPointId
          in: path
          description: 'The originating station''s stop point id (station naptan code e.g. 940GZZLUASL, you can use /StopPoint/Search/{query} endpoint to find a stop point id from a station name)'
          required: true
          schema:
            type: string
        - name: id
          in: path
          description: A single line id e.g. victoria
          required: true
          schema:
            type: string
        - name: toStopPointId
          in: path
          description: The destination stations's Naptan code
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.TimetableResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.TimetableResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.TimetableResponse'
            text/xml:
              schema:
                $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.TimetableResponse'
      deprecated: false
      tags:
        - Line
  /Mode/ActiveServiceTypes:
    get:
      operationId: Mode_GetActiveServiceTypes
      summary: Returns the service type active for a mode
      description: Returns the service type active for a mode. Currently only supports tube
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.ActiveServiceType'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.ActiveServiceType'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.ActiveServiceType'
            text/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.ActiveServiceType'
      deprecated: false
      tags:
        - Mode
  '/Mode/{mode}/Arrivals':
    get:
      operationId: Mode_Arrivals
      summary: Gets next arrival predictions for stops by mode
      description: Gets the next arrival predictions for all stops of a given mode
      parameters:
        - name: mode
          in: path
          description: 'A mode name e.g. tube, dlr'
          required: true
          schema:
            type: string
        - name: count
          in: query
          description: 'A number of arrivals to return for each stop, -1 to return all available.'
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.Prediction'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.Prediction'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.Prediction'
            text/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.Prediction'
      deprecated: false
      tags:
        - Mode
  '/Occupancy/BikePoints/{ids}':
    get:
      operationId: Occupancy_GetBikePointsOccupancies
      summary: Get occupancy for bike points.
      description: Get the occupancy for bike points.
      parameters:
        - name: ids
          in: path
          required: true
          schema:
            type: array
            items:
              type: string
          explode: false
          style: simple
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.BikePointOccupancy'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.BikePointOccupancy'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.BikePointOccupancy'
            text/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.BikePointOccupancy'
      deprecated: false
      tags:
        - Occupancy
  /Occupancy/CarPark:
    get:
      operationId: Occupancy_GetAll
      summary: Gets occupancy for car parks
      description: Gets the occupancy for all car parks that have occupancy data
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.CarParkOccupancy'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.CarParkOccupancy'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.CarParkOccupancy'
            text/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.CarParkOccupancy'
      deprecated: false
      tags:
        - Occupancy
  '/Occupancy/CarPark/{id}':
    get:
      operationId: Occupancy_Get
      summary: Gets occupancy for a car park by id
      description: Gets the occupancy for a car park with a given id
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.CarParkOccupancy'
            application/xml:
              schema:
                $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.CarParkOccupancy'
            text/json:
              schema:
                $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.CarParkOccupancy'
            text/xml:
              schema:
                $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.CarParkOccupancy'
      deprecated: false
      tags:
        - Occupancy
  /Occupancy/ChargeConnector:
    get:
      operationId: Occupancy_GetAllChargeConnectorStatus
      summary: Gets occupancy for charge connectors
      description: Gets the occupancy for all charge connectors
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.ChargeConnectorOccupancy'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.ChargeConnectorOccupancy'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.ChargeConnectorOccupancy'
            text/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.ChargeConnectorOccupancy'
      deprecated: false
      tags:
        - Occupancy
  '/Occupancy/ChargeConnector/{ids}':
    get:
      operationId: Occupancy_GetChargeConnectorStatus
      summary: Gets occupancy for charge connectors by id
      description: Gets the occupancy for a charge connectors with a given id (sourceSystemPlaceId)
      parameters:
        - name: ids
          in: path
          required: true
          schema:
            type: array
            items:
              type: string
          explode: false
          style: simple
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.ChargeConnectorOccupancy'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.ChargeConnectorOccupancy'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.ChargeConnectorOccupancy'
            text/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.ChargeConnectorOccupancy'
      deprecated: false
      tags:
        - Occupancy
  /Place:
    get:
      operationId: Place_GetByGeo
      summary: Gets places that lie within a geographic region
      description: 'Gets the places that lie within a geographic region. The geographic region of interest can either be specified by using a lat/lon geo-point and a radius in metres to return places within the locus defined by the lat/lon of its centre or alternatively, by the use of a bounding box defined by the lat/lon of its north-west and south-east corners. Optionally filters on type and can strip properties for a smaller payload.'
      parameters:
        - name: radius
          in: query
          description: The radius of the bounding circle in metres when only lat/lon are specified.
          schema:
            type: number
            format: double
        - name: categories
          in: query
          description: 'An optional list of comma separated property categories to return in the Place''s property bag. If null or empty, all categories of property are returned. Pass the keyword "none" to return no properties (a valid list of categories can be obtained from the /Place/Meta/categories endpoint)'
          schema:
            type: array
            items:
              type: string
          explode: true
          style: form
        - name: includeChildren
          in: query
          description: 'Defaults to false. If true child places e.g. individual charging stations at a charge point while be included, otherwise just the URLs of any child places will be returned'
          schema:
            type: boolean
        - name: type
          in: query
          description: 'Place types to filter on, or null to return all types'
          schema:
            type: array
            items:
              type: string
          explode: true
          style: form
        - name: activeOnly
          in: query
          description: An optional parameter to limit the results to active records only (Currently only the 'VariableMessageSign' place type is supported)
          schema:
            type: boolean
        - name: numberOfPlacesToReturn
          in: query
          description: 'If specified, limits the number of returned places equal to the given value'
          schema:
            type: integer
            format: int32
        - name: placeGeo.swLat
          in: query
          schema:
            type: number
            format: double
        - name: placeGeo.swLon
          in: query
          schema:
            type: number
            format: double
        - name: placeGeo.neLat
          in: query
          schema:
            type: number
            format: double
        - name: placeGeo.neLon
          in: query
          schema:
            type: number
            format: double
        - name: placeGeo.lat
          in: query
          schema:
            type: number
            format: double
        - name: placeGeo.lon
          in: query
          schema:
            type: number
            format: double
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.StopPoint'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.StopPoint'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.StopPoint'
            text/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.StopPoint'
      deprecated: false
      tags:
        - Place
  '/Place/Address/Streets/{postcode}':
    get:
      operationId: Place_GetStreetsByPostCode
      summary: Gets streets associated with post code
      description: Gets the set of streets associated with a post code.
      parameters:
        - name: postcode
          in: path
          required: true
          schema:
            type: string
            pattern: '^(([gG][iI][rR] {0,}0[aA]{2})|((([a-pr-uwyzA-PR-UWYZ][a-hk-yA-HK-Y]?[0-9][0-9]?)|(([a-pr-uwyzA-PR-UWYZ][0-9][a-hjkstuwA-HJKSTUW])|([a-pr-uwyzA-PR-UWYZ][a-hk-yA-HK-Y][0-9][abehmnprv-yABEHMNPRV-Y]))) {0,}[0-9][abd-hjlnp-uw-zABD-HJLNP-UW-Z]{2}))$'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/System.Object'
            application/xml:
              schema:
                $ref: '#/components/schemas/System.Object'
            text/json:
              schema:
                $ref: '#/components/schemas/System.Object'
            text/xml:
              schema:
                $ref: '#/components/schemas/System.Object'
      deprecated: false
      tags:
        - Place
  /Place/Meta/Categories:
    get:
      operationId: Place_MetaCategories
      summary: Gets available place property categories and keys.
      description: Gets a list of all of the available place property categories and keys.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.PlaceCategory'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.PlaceCategory'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.PlaceCategory'
            text/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.PlaceCategory'
      deprecated: false
      tags:
        - Place
  /Place/Meta/PlaceTypes:
    get:
      operationId: Place_MetaPlaceTypes
      summary: Gets available types of Place.
      description: Gets a list of the available types of Place.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.PlaceCategory'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.PlaceCategory'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.PlaceCategory'
            text/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.PlaceCategory'
      deprecated: false
      tags:
        - Place
  /Place/Search:
    get:
      operationId: Place_Search
      summary: Gets places that matches the given query
      description: Gets all places that matches the given query
      parameters:
        - name: name
          in: query
          description: 'The name of the place, you can use the /Place/Types/{types} endpoint to get a list of places for a given type including their names.'
          required: true
          schema:
            type: string
        - name: types
          in: query
          description: A comma-separated list of the types to return. Max. approx 12 types.
          schema:
            type: array
            items:
              type: string
          explode: true
          style: form
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.Place'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.Place'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.Place'
            text/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.Place'
      deprecated: false
      tags:
        - Place
  '/Place/Type/{types}':
    get:
      operationId: Place_GetByType
      summary: Gets places of a given type
      description: Gets all places of a given type
      parameters:
        - name: types
          in: path
          description: A comma-separated list of the types to return. Max. approx 12 types. A valid list of place types can be obtained from the /Place/Meta/placeTypes endpoint.
          required: true
          schema:
            type: array
            items:
              type: string
          explode: false
          style: simple
        - name: activeOnly
          in: query
          description: An optional parameter to limit the results to active records only (Currently only the 'VariableMessageSign' place type is supported)
          schema:
            type: boolean
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.Place'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.Place'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.Place'
            text/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.Place'
      deprecated: false
      tags:
        - Place
  '/Place/{id}':
    get:
      operationId: Place_Get
      summary: Gets place by given id.
      description: Gets the place with the given id.
      parameters:
        - name: id
          in: path
          description: 'The id of the place, you can use the /Place/Types/{types} endpoint to get a list of places for a given type including their ids'
          required: true
          schema:
            type: string
        - name: includeChildren
          in: query
          description: 'Defaults to false. If true child places e.g. individual charging stations at a charge point while be included, otherwise just the URLs of any child places will be returned'
          schema:
            type: boolean
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.Place'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.Place'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.Place'
            text/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.Place'
      deprecated: false
      tags:
        - Place
  '/Place/{type}/At/{lat}/{lon}':
    get:
      operationId: Place_GetAt
      summary: Gets places by type whose geography intersects the given latitude and longitude
      description: Gets any places of the given type whose geography intersects the given latitude and longitude. In practice this means the Place must be polygonal e.g. a BoroughBoundary.
      parameters:
        - name: type
          in: path
          description: The place type (a valid list of place types can be obtained from the /Place/Meta/placeTypes endpoint)
          required: true
          schema:
            type: array
            items:
              type: string
          explode: false
          style: simple
        - name: lat
          in: path
          required: true
          schema:
            type: number
            format: double
        - name: lon
          in: path
          required: true
          schema:
            type: number
            format: double
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/System.Object'
            application/xml:
              schema:
                $ref: '#/components/schemas/System.Object'
            text/json:
              schema:
                $ref: '#/components/schemas/System.Object'
            text/xml:
              schema:
                $ref: '#/components/schemas/System.Object'
      deprecated: false
      tags:
        - Place
  '/Place/{type}/overlay/{z}/{lat}/{lon}/{width}/{height}':
    get:
      operationId: Place_GetOverlay
      summary: Gets place overlay for a set of co-ordinates and a given width/height.
      description: Gets the place overlay for a given set of co-ordinates and a given width/height.
      parameters:
        - name: z
          in: path
          description: The zoom level
          required: true
          schema:
            type: integer
            format: int32
        - name: type
          in: path
          description: The place type (a valid list of place types can be obtained from the /Place/Meta/placeTypes endpoint)
          required: true
          schema:
            type: array
            items:
              type: string
          explode: false
          style: simple
        - name: width
          in: path
          description: The width of the requested overlay.
          required: true
          schema:
            type: integer
            format: int32
        - name: height
          in: path
          description: The height of the requested overlay.
          required: true
          schema:
            type: integer
            format: int32
        - name: lat
          in: path
          required: true
          schema:
            type: number
            format: double
        - name: lon
          in: path
          required: true
          schema:
            type: number
            format: double
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/System.Object'
            application/xml:
              schema:
                $ref: '#/components/schemas/System.Object'
            text/json:
              schema:
                $ref: '#/components/schemas/System.Object'
            text/xml:
              schema:
                $ref: '#/components/schemas/System.Object'
      deprecated: false
      tags:
        - Place
  /Road:
    get:
      operationId: Road_GetAll
      summary: Gets roads managed by TfL
      description: Gets all roads managed by Transport for London
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.RoadCorridor'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.RoadCorridor'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.RoadCorridor'
            text/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.RoadCorridor'
      deprecated: false
      tags:
        - Road
  /Road/Meta/Categories:
    get:
      operationId: Road_MetaCategories
      summary: Gets RoadDisruption categories
      description: Gets a list of valid RoadDisruption categories
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
            application/xml:
              schema:
                type: array
                items:
                  type: string
            text/json:
              schema:
                type: array
                items:
                  type: string
            text/xml:
              schema:
                type: array
                items:
                  type: string
      deprecated: false
      tags:
        - Road
  /Road/Meta/Severities:
    get:
      operationId: Road_MetaSeverities
      summary: Gets RoadDisruption severity codes
      description: Gets a list of valid RoadDisruption severity codes
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.StatusSeverity'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.StatusSeverity'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.StatusSeverity'
            text/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.StatusSeverity'
      deprecated: false
      tags:
        - Road
  '/Road/all/Disruption/{disruptionIds}':
    get:
      operationId: Road_DisruptionById
      summary: Gets active disruptions by disruption Ids.
      description: Gets a list of active disruptions filtered by disruption Ids.
      parameters:
        - name: disruptionIds
          in: path
          description: Comma-separated list of disruption identifiers to filter by.
          required: true
          schema:
            type: array
            items:
              type: string
          explode: false
          style: simple
        - name: stripContent
          in: query
          description: 'Optional, defaults to false. When true, removes every property/node except for id, point, severity, severityDescription, startDate, endDate, corridor details, location and comments.'
          schema:
            type: boolean
      responses:
        '200':
          description: OK
          content:
            application/geo+json:
              schema:
                $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.RoadDisruption'
            application/json:
              schema:
                $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.RoadDisruption'
            application/xml:
              schema:
                $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.RoadDisruption'
            text/json:
              schema:
                $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.RoadDisruption'
            text/xml:
              schema:
                $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.RoadDisruption'
      deprecated: false
      tags:
        - Road
  /Road/all/Street/Disruption:
    get:
      operationId: Road_DisruptedStreets
      summary: Gets disrupted streets
      description: 'Gets a list of disrupted streets. If no date filters are provided, current disruptions are returned.'
      parameters:
        - name: startDate
          in: query
          description: 'Optional, the start time to filter on.'
          required: true
          schema:
            type: string
            format: date-time
        - name: endDate
          in: query
          description: 'Optional, The end time to filter on.'
          required: true
          schema:
            type: string
            format: date-time
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/System.Object'
            application/xml:
              schema:
                $ref: '#/components/schemas/System.Object'
            text/json:
              schema:
                $ref: '#/components/schemas/System.Object'
            text/xml:
              schema:
                $ref: '#/components/schemas/System.Object'
      deprecated: false
      tags:
        - Road
  '/Road/{ids}':
    get:
      operationId: Road_Get
      summary: Gets road by id (e.g. A1)
      description: Gets the road with the specified id (e.g. A1)
      parameters:
        - name: ids
          in: path
          description: 'Comma-separated list of road identifiers e.g. "A406, A2" (a full list of supported road identifiers can be found at the /Road/ endpoint)'
          required: true
          schema:
            type: array
            items:
              type: string
          explode: false
          style: simple
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.RoadCorridor'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.RoadCorridor'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.RoadCorridor'
            text/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.RoadCorridor'
      deprecated: false
      tags:
        - Road
  '/Road/{ids}/Disruption':
    get:
      operationId: Road_Disruption
      summary: Get active disruptions by road ids
      description: 'Get active disruptions, filtered by road ids'
      parameters:
        - name: ids
          in: path
          description: 'Comma-separated list of road identifiers e.g. "A406, A2" use all for all to ignore id filter (a full list of supported road identifiers can be found at the /Road/ endpoint)'
          required: true
          schema:
            type: array
            items:
              type: string
          explode: false
          style: simple
        - name: stripContent
          in: query
          description: 'Optional, defaults to false. When true, removes every property/node except for id, point, severity, severityDescription, startDate, endDate, corridor details, location, comments and streets'
          schema:
            type: boolean
        - name: severities
          in: query
          description: an optional list of Severity names to filter on (a valid list of severities can be obtained from the /Road/Meta/severities endpoint)
          schema:
            type: array
            items:
              type: string
          explode: true
          style: form
        - name: categories
          in: query
          description: an optional list of category names to filter on (a valid list of categories can be obtained from the /Road/Meta/categories endpoint)
          schema:
            type: array
            items:
              type: string
          explode: true
          style: form
        - name: closures
          in: query
          description: 'Optional, defaults to true. When true, always includes disruptions that have road closures, regardless of the severity filter. When false, the severity filter works as normal.'
          schema:
            type: boolean
      responses:
        '200':
          description: OK
          content:
            application/geo+json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.RoadDisruption'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.RoadDisruption'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.RoadDisruption'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.RoadDisruption'
            text/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.RoadDisruption'
      deprecated: false
      tags:
        - Road
  '/Road/{ids}/Status':
    get:
      operationId: Road_Status
      summary: Gets roads with the status aggregated by date range
      description: 'Gets the specified roads with the status aggregated over the date range specified, or now until the end of today if no dates are passed.'
      parameters:
        - name: ids
          in: path
          description: 'Comma-separated list of road identifiers e.g. "A406, A2" or use "all" to ignore id filter (a full list of supported road identifiers can be found at the /Road/ endpoint)'
          required: true
          schema:
            type: array
            items:
              type: string
          explode: false
          style: simple
        - name: dateRangeNullable.startDate
          in: query
          schema:
            type: string
            format: date-time
        - name: dateRangeNullable.endDate
          in: query
          schema:
            type: string
            format: date-time
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.RoadCorridor'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.RoadCorridor'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.RoadCorridor'
            text/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.RoadCorridor'
      deprecated: false
      tags:
        - Road
  /Search:
    get:
      operationId: Search_Get
      summary: Search the site for occurrences of the query string
      description: 'Search the site for occurrences of the query string. The maximum number of results returned is equal to the maximum page size of 100. To return subsequent pages, use the paginated overload.'
      parameters:
        - name: query
          in: query
          description: The search query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.SearchResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.SearchResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.SearchResponse'
            text/xml:
              schema:
                $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.SearchResponse'
      deprecated: false
      tags:
        - Search
  /Search/BusSchedules:
    get:
      operationId: Search_BusSchedules
      summary: Searches bus schedules folder by bus number.
      description: Searches the bus schedules folder on S3 for a given bus number.
      parameters:
        - name: query
          in: query
          description: The search query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.SearchResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.SearchResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.SearchResponse'
            text/xml:
              schema:
                $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.SearchResponse'
      deprecated: false
      tags:
        - Search
  /Search/Meta/Categories:
    get:
      operationId: Search_MetaCategories
      summary: Gets search categories
      description: Gets the available search categories.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
            application/xml:
              schema:
                type: array
                items:
                  type: string
            text/json:
              schema:
                type: array
                items:
                  type: string
            text/xml:
              schema:
                type: array
                items:
                  type: string
      deprecated: false
      tags:
        - Search
  /Search/Meta/SearchProviders:
    get:
      operationId: Search_MetaSearchProviders
      summary: Gets searchProvider names
      description: Gets the available searchProvider names.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
            application/xml:
              schema:
                type: array
                items:
                  type: string
            text/json:
              schema:
                type: array
                items:
                  type: string
            text/xml:
              schema:
                type: array
                items:
                  type: string
      deprecated: false
      tags:
        - Search
  /Search/Meta/Sorts:
    get:
      operationId: Search_MetaSorts
      summary: Gets sorting options
      description: Gets the available sorting options.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
            application/xml:
              schema:
                type: array
                items:
                  type: string
            text/json:
              schema:
                type: array
                items:
                  type: string
            text/xml:
              schema:
                type: array
                items:
                  type: string
      deprecated: false
      tags:
        - Search
  /StopPoint:
    get:
      operationId: StopPoint_GetByGeoPoint
      summary: Gets StopPoints within {radius} and specified criteria
      description: 'Gets a list of StopPoints within {radius} by the specified criteria'
      parameters:
        - name: stopTypes
          in: query
          description: a list of stopTypes that should be returned (a list of valid stop types can be obtained from the StopPoint/meta/stoptypes endpoint)
          required: true
          schema:
            type: array
            items:
              type: string
          explode: true
          style: form
        - name: radius
          in: query
          description: 'the radius of the bounding circle in metres (default : 200)'
          schema:
            type: integer
            format: int32
        - name: useStopPointHierarchy
          in: query
          description: Re-arrange the output into a parent/child hierarchy
          schema:
            type: boolean
        - name: modes
          in: query
          description: 'the list of modes to search (comma separated mode names e.g. tube,dlr)'
          schema:
            type: array
            items:
              type: string
          explode: true
          style: form
        - name: categories
          in: query
          description: 'an optional list of comma separated property categories to return in the StopPoint''s property bag. If null or empty, all categories of property are returned. Pass the keyword "none" to return no properties (a valid list of categories can be obtained from the /StopPoint/Meta/categories endpoint)'
          schema:
            type: array
            items:
              type: string
          explode: true
          style: form
        - name: returnLines
          in: query
          description: true to return the lines that each stop point serves as a nested resource
          schema:
            type: boolean
        - name: location.lat
          in: query
          required: true
          schema:
            type: number
            format: double
        - name: location.lon
          in: query
          required: true
          schema:
            type: number
            format: double
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.StopPointsResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.StopPointsResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.StopPointsResponse'
            text/xml:
              schema:
                $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.StopPointsResponse'
      deprecated: false
      tags:
        - StopPoint
  /StopPoint/Meta/Categories:
    get:
      operationId: StopPoint_MetaCategories
      summary: Gets StopPoint information categories
      description: Gets the list of available StopPoint additional information categories
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.StopPointCategory'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.StopPointCategory'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.StopPointCategory'
            text/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.StopPointCategory'
      deprecated: false
      tags:
        - StopPoint
  /StopPoint/Meta/Modes:
    get:
      operationId: StopPoint_MetaModes
      summary: Gets available StopPoint modes
      description: Gets the list of available StopPoint modes
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.Mode'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.Mode'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.Mode'
            text/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.Mode'
      deprecated: false
      tags:
        - StopPoint
  /StopPoint/Meta/StopTypes:
    get:
      operationId: StopPoint_MetaStopTypes
      summary: Gets available StopPoint types
      description: Gets the list of available StopPoint types
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
            application/xml:
              schema:
                type: array
                items:
                  type: string
            text/json:
              schema:
                type: array
                items:
                  type: string
            text/xml:
              schema:
                type: array
                items:
                  type: string
      deprecated: false
      tags:
        - StopPoint
  '/StopPoint/Mode/{modes}':
    get:
      operationId: StopPoint_GetByMode
      summary: Gets StopPoints by modes
      description: Gets a list of StopPoints filtered by the modes available at that StopPoint.
      parameters:
        - name: modes
          in: path
          description: 'A comma-seperated list of modes e.g. tube,dlr'
          required: true
          schema:
            type: array
            items:
              type: string
          explode: false
          style: simple
        - name: page
          in: query
          description: 'The data set page to return. Page 1 equates to the first 1000 stop points, page 2 equates to 1001-2000 etc. Must be entered for bus mode as data set is too large.'
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.StopPointsResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.StopPointsResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.StopPointsResponse'
            text/xml:
              schema:
                $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.StopPointsResponse'
      deprecated: false
      tags:
        - StopPoint
  '/StopPoint/Mode/{modes}/Disruption':
    get:
      operationId: StopPoint_DisruptionByMode
      summary: Gets disrupted stop points by modes
      description: Gets a distinct list of disrupted stop points for the given modes
      parameters:
        - name: modes
          in: path
          description: 'A comma-seperated list of modes e.g. tube,dlr'
          required: true
          schema:
            type: array
            items:
              type: string
          explode: false
          style: simple
        - name: includeRouteBlockedStops
          in: query
          schema:
            type: boolean
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.DisruptedPoint'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.DisruptedPoint'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.DisruptedPoint'
            text/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.DisruptedPoint'
      deprecated: false
      tags:
        - StopPoint
  /StopPoint/Search:
    get:
      operationId: StopPoint_SearchAll
      summary: Search StopPoints by name, or 5-digit Countdown Bus Stop Code
      description: 'Search StopPoints by their common name, or their 5-digit Countdown Bus Stop Code.'
      parameters:
        - name: query
          in: query
          description: 'The query string, case-insensitive. Leading and trailing wildcards are applied automatically.'
          required: true
          schema:
            type: string
        - name: modes
          in: query
          description: 'An optional, parameter separated list of the modes to filter by'
          schema:
            type: array
            items:
              type: string
          explode: true
          style: form
        - name: faresOnly
          in: query
          description: True to only return stations in that have Fares data available for single fares to another station.
          schema:
            type: boolean
        - name: maxResults
          in: query
          description: 'An optional result limit, defaulting to and with a maximum of 50. Since children of the stop point heirarchy are returned for matches, it is possible that the flattened result set will contain more than 50 items.'
          schema:
            type: integer
            format: int32
        - name: lines
          in: query
          description: 'An optional, parameter separated list of the lines to filter by'
          schema:
            type: array
            items:
              type: string
          explode: true
          style: form
        - name: includeHubs
          in: query
          description: 'If true, returns results including HUBs.'
          schema:
            type: boolean
        - name: tflOperatedNationalRailStationsOnly
          in: query
          description: 'If the national-rail mode is included, this flag will filter the national rail stations so that only those operated by TfL are returned'
          schema:
            type: boolean
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.SearchResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.SearchResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.SearchResponse'
            text/xml:
              schema:
                $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.SearchResponse'
      deprecated: false
      tags:
        - StopPoint
  '/StopPoint/Search/{query}':
    get:
      operationId: StopPoint_Search
      summary: Search StopPoints by name, or 5-digit Countdown Bus Stop Code
      description: 'Search StopPoints by their common name, or their 5-digit Countdown Bus Stop Code.'
      parameters:
        - name: query
          in: path
          description: 'The query string, case-insensitive. Leading and trailing wildcards are applied automatically.'
          required: true
          schema:
            type: string
        - name: modes
          in: query
          description: 'An optional, parameter separated list of the modes to filter by'
          schema:
            type: array
            items:
              type: string
          explode: true
          style: form
        - name: faresOnly
          in: query
          description: True to only return stations in that have Fares data available for single fares to another station.
          schema:
            type: boolean
        - name: maxResults
          in: query
          description: 'An optional result limit, defaulting to and with a maximum of 50. Since children of the stop point heirarchy are returned for matches, it is possible that the flattened result set will contain more than 50 items.'
          schema:
            type: integer
            format: int32
        - name: lines
          in: query
          description: 'An optional, parameter separated list of the lines to filter by'
          schema:
            type: array
            items:
              type: string
          explode: true
          style: form
        - name: includeHubs
          in: query
          description: 'If true, returns results including HUBs.'
          schema:
            type: boolean
        - name: tflOperatedNationalRailStationsOnly
          in: query
          description: 'If the national-rail mode is included, this flag will filter the national rail stations so that only those operated by TfL are returned'
          schema:
            type: boolean
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.SearchResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.SearchResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.SearchResponse'
            text/xml:
              schema:
                $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.SearchResponse'
      deprecated: false
      tags:
        - StopPoint
  /StopPoint/ServiceTypes:
    get:
      operationId: StopPoint_GetServiceTypes
      summary: Gets service types by stoppoint
      description: Gets the service types for a given stoppoint
      parameters:
        - name: id
          in: query
          description: The Naptan id of the stop
          required: true
          schema:
            type: string
        - name: lineIds
          in: query
          description: The lines which contain the given Naptan id (all lines relevant to the given stoppoint if empty)
          schema:
            type: array
            items:
              type: string
          explode: true
          style: form
        - name: modes
          in: query
          description: The modes which the lines are relevant to (all if empty)
          schema:
            type: array
            items:
              type: string
          explode: true
          style: form
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.LineServiceType'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.LineServiceType'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.LineServiceType'
            text/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.LineServiceType'
      deprecated: false
      tags:
        - StopPoint
  '/StopPoint/Sms/{id}':
    get:
      operationId: StopPoint_GetBySms
      summary: Gets StopPoint by sms code.
      description: Gets a StopPoint for a given sms code.
      parameters:
        - name: id
          in: path
          description: 'A 5-digit Countdown Bus Stop Code e.g. 73241, 50435, 56334.'
          required: true
          schema:
            type: string
        - name: output
          in: query
          description: 'If set to "web", a 302 redirect to relevant website bus stop page is returned. Valid values are : web. All other values are ignored.'
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/System.Object'
            application/xml:
              schema:
                $ref: '#/components/schemas/System.Object'
            text/json:
              schema:
                $ref: '#/components/schemas/System.Object'
            text/xml:
              schema:
                $ref: '#/components/schemas/System.Object'
      deprecated: false
      tags:
        - StopPoint
  '/StopPoint/Type/{types}':
    get:
      operationId: StopPoint_GetByType
      summary: Gets stop points by type
      description: Gets all stop points of a given type
      parameters:
        - name: types
          in: path
          description: A comma-separated list of the types to return. Max. approx. 12 types. A list of valid stop types can be obtained from the StopPoint/meta/stoptypes endpoint.
          required: true
          schema:
            type: array
            items:
              type: string
          explode: false
          style: simple
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.StopPoint'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.StopPoint'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.StopPoint'
            text/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.StopPoint'
      deprecated: false
      tags:
        - StopPoint
  '/StopPoint/Type/{types}/page/{page}':
    get:
      operationId: StopPoint_GetByTypeWithPagination
      summary: Gets stop points by type(s) with a page number
      description: Gets all the stop points of given type(s) with a page number
      parameters:
        - name: types
          in: path
          required: true
          schema:
            type: array
            items:
              type: string
          explode: false
          style: simple
        - name: page
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.StopPoint'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.StopPoint'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.StopPoint'
            text/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.StopPoint'
      deprecated: false
      tags:
        - StopPoint
  '/StopPoint/{ids}':
    get:
      operationId: StopPoint_GetById
      summary: Gets StopPoints by list of stop ids.
      description: Gets a list of StopPoints corresponding to the given list of stop ids.
      parameters:
        - name: ids
          in: path
          description: 'A comma-separated list of stop point ids (station naptan code e.g. 940GZZLUASL). Max. approx. 20 ids. You can use /StopPoint/Search/{query} endpoint to find a stop point id from a station name.'
          required: true
          schema:
            type: array
            items:
              type: string
          explode: false
          style: simple
        - name: includeCrowdingData
          in: query
          description: 'Include the crowding data (static). To Filter further use: /StopPoint/{ids}/Crowding/{line}'
          schema:
            type: boolean
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.StopPoint'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.StopPoint'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.StopPoint'
            text/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.StopPoint'
      deprecated: false
      tags:
        - StopPoint
  '/StopPoint/{ids}/Disruption':
    get:
      operationId: StopPoint_Disruption
      summary: Gets disruptions by StopPointId
      description: 'Gets all disruptions for the specified StopPointId, plus disruptions for any child Naptan records it may have.'
      parameters:
        - name: ids
          in: path
          description: 'A comma-seperated list of stop point ids. Max. approx. 20 ids. You can use /StopPoint/Search/{query} endpoint to find a stop point id from a station name.'
          required: true
          schema:
            type: array
            items:
              type: string
          explode: false
          style: simple
        - name: getFamily
          in: query
          description: 'Specify true to return disruptions for entire family, or false to return disruptions for just this stop point. Defaults to false.'
          schema:
            type: boolean
        - name: includeRouteBlockedStops
          in: query
          schema:
            type: boolean
        - name: flattenResponse
          in: query
          description: Specify true to associate all disruptions with parent stop point. (Only applicable when getFamily is true).
          schema:
            type: boolean
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.DisruptedPoint'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.DisruptedPoint'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.DisruptedPoint'
            text/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.DisruptedPoint'
      deprecated: false
      tags:
        - StopPoint
  '/StopPoint/{id}/ArrivalDepartures':
    get:
      operationId: StopPoint_ArrivalDepartures
      summary: Gets list of arrival and departure predictions by stop point id
      description: 'Gets the list of arrival and departure predictions for the given stop point id (overground, Elizabeth line and thameslink only)'
      parameters:
        - name: id
          in: path
          description: 'A StopPoint id (station naptan code e.g. 940GZZLUASL, you can use /StopPoint/Search/{query} endpoint to find a stop point id from a station name)'
          required: true
          schema:
            type: string
        - name: lineIds
          in: query
          description: 'A comma-separated list of line ids e.g. elizabeth, london-overground, thameslink'
          required: true
          schema:
            type: array
            items:
              type: string
          explode: true
          style: form
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.ArrivalDeparture'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.ArrivalDeparture'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.ArrivalDeparture'
            text/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.ArrivalDeparture'
      deprecated: false
      tags:
        - StopPoint
  '/StopPoint/{id}/Arrivals':
    get:
      operationId: StopPoint_Arrivals
      summary: Gets arrival predictions by stop point id
      description: Gets the list of arrival predictions for the given stop point id
      parameters:
        - name: id
          in: path
          description: 'A StopPoint id (station naptan code e.g. 940GZZLUASL, you can use /StopPoint/Search/{query} endpoint to find a stop point id from a station name)'
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.Prediction'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.Prediction'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.Prediction'
            text/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.Prediction'
      deprecated: false
      tags:
        - StopPoint
  '/StopPoint/{id}/CanReachOnLine/{lineId}':
    get:
      operationId: StopPoint_ReachableFrom
      summary: Gets Stopoints that are reachable by station and line
      description: Gets Stopoints that are reachable from a station/line combination.
      parameters:
        - name: id
          in: path
          description: 'The id (station naptan code e.g. 940GZZLUASL, you can use /StopPoint/Search/{query} endpoint to find a stop point id from a station name) of the stop point to filter by'
          required: true
          schema:
            type: string
        - name: lineId
          in: path
          description: Line id of the line to filter by (e.g. victoria)
          required: true
          schema:
            type: string
        - name: serviceTypes
          in: query
          description: 'A comma-separated list of service types to filter on. If not specified. Supported values: Regular, Night. Defaulted to ''Regular'' if not specified'
          schema:
            type: array
            items:
              enum:
                - Regular
                - Night
              type: string
          explode: true
          style: form
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.StopPoint'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.StopPoint'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.StopPoint'
            text/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.StopPoint'
      deprecated: false
      tags:
        - StopPoint
  '/StopPoint/{id}/Crowding/{line}':
    get:
      operationId: StopPoint_Crowding
      summary: Gets Crowding data by StopPointId
      description: 'Gets all the Crowding data (static) for the StopPointId, plus crowding data for a given line and optionally a particular direction.'
      parameters:
        - name: id
          in: path
          description: The Naptan id of the stop
          required: true
          schema:
            type: string
        - name: line
          in: path
          description: 'A particular line e.g. victoria, circle, northern etc.'
          required: true
          schema:
            type: string
        - name: direction
          in: query
          description: The direction of travel. Can be inbound or outbound.
          required: true
          schema:
            type: string
            enum:
              - inbound
              - outbound
              - all
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.StopPoint'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.StopPoint'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.StopPoint'
            text/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.StopPoint'
      deprecated: false
      tags:
        - StopPoint
  '/StopPoint/{id}/DirectionTo/{toStopPointId}':
    get:
      operationId: StopPoint_Direction
      summary: Returns "inbound" or "outbound", for a given pair of stop point Ids
      description: 'Returns the canonical direction, "inbound" or "outbound", for a given pair of stop point Ids in the direction from -&gt; to.'
      parameters:
        - name: id
          in: path
          description: 'Originating stop id (station naptan code e.g. 940GZZLUASL, you can use /StopPoint/Search/{query} endpoint to find a stop point id from a station name)'
          required: true
          schema:
            type: string
        - name: toStopPointId
          in: path
          description: 'Destination stop id (station naptan code e.g. 940GZZLUASL, you can use /StopPoint/Search/{query} endpoint to find a stop point id from a station name)'
          required: true
          schema:
            type: string
        - name: lineId
          in: query
          description: Optional line id filter e.g. victoria
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: string
            application/xml:
              schema:
                type: string
            text/json:
              schema:
                type: string
            text/xml:
              schema:
                type: string
      deprecated: false
      tags:
        - StopPoint
  '/StopPoint/{id}/Route':
    get:
      operationId: StopPoint_Route
      summary: Returns route sections for lines that service given stop point ids
      description: Returns the route sections for all the lines that service the given stop point ids
      parameters:
        - name: id
          in: path
          description: 'A stop point id (station naptan codes e.g. 940GZZLUASL, you can use /StopPoint/Search/{query} endpoint to find a stop point id from a station name)'
          required: true
          schema:
            type: string
        - name: serviceTypes
          in: query
          description: 'A comma-separated list of service types to filter on. If not specified. Supported values: Regular, Night. Defaulted to ''Regular'' if not specified'
          schema:
            type: array
            items:
              enum:
                - Regular
                - Night
              type: string
          explode: true
          style: form
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.StopPointRouteSection'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.StopPointRouteSection'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.StopPointRouteSection'
            text/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.StopPointRouteSection'
      deprecated: false
      tags:
        - StopPoint
  '/StopPoint/{id}/placeTypes':
    get:
      operationId: StopPoint_PlaceTypes_GetById
      summary: Get places by id and place types
      description: Get a list of places corresponding to a given id and place types.
      parameters:
        - name: id
          in: path
          description: A naptan id for a stop point (station naptan code e.g. 940GZZLUASL).
          required: true
          schema:
            type: string
        - name: placeTypes
          in: query
          description: A comcomma-separated value representing the place types.
          required: true
          schema:
            type: array
            items:
              type: string
          explode: true
          style: form
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.Place'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.Place'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.Place'
            text/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.Place'
      deprecated: false
      tags:
        - StopPoint
  '/StopPoint/{stopPointId}/CarParks':
    get:
      operationId: StopPoint_GetCarParksById
      summary: Get car parks by stop point id.
      description: Get car parks corresponding to the given stop point id.
      parameters:
        - name: stopPointId
          in: path
          description: stopPointId is required to get the car parks.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.Place'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.Place'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.Place'
            text/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.Place'
      deprecated: false
      tags:
        - StopPoint
  '/StopPoint/{stopPointId}/TaxiRanks':
    get:
      operationId: StopPoint_GetTaxiRanksByIds
      summary: Gets taxi ranks by stop point id.
      description: Gets a list of taxi ranks corresponding to the given stop point id.
      parameters:
        - name: stopPointId
          in: path
          description: stopPointId is required to get the taxi ranks.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.Place'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.Place'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.Place'
            text/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.Place'
      deprecated: false
      tags:
        - StopPoint
  '/TravelTimes/compareOverlay/{z}/mapcenter/{mapCenterLat}/{mapCenterLon}/pinlocation/{pinLat}/{pinLon}/dimensions/{width}/{height}':
    get:
      operationId: TravelTime_GetCompareOverlay
      summary: Gets TravelTime overlay
      description: Gets the TravelTime overlay.
      parameters:
        - name: z
          in: path
          description: The zoom level.
          required: true
          schema:
            type: integer
            format: int32
        - name: pinLat
          in: path
          description: The latitude of the pin.
          required: true
          schema:
            type: number
            format: double
        - name: pinLon
          in: path
          description: The longitude of the pin.
          required: true
          schema:
            type: number
            format: double
        - name: mapCenterLat
          in: path
          description: The map center latitude.
          required: true
          schema:
            type: number
            format: double
        - name: mapCenterLon
          in: path
          description: The map center longitude.
          required: true
          schema:
            type: number
            format: double
        - name: scenarioTitle
          in: query
          description: The title of the scenario.
          required: true
          schema:
            type: string
        - name: timeOfDayId
          in: query
          description: The id for the time of day (AM/INTER/PM)
          required: true
          schema:
            type: string
        - name: modeId
          in: query
          description: The id of the mode.
          required: true
          schema:
            type: string
        - name: width
          in: path
          description: The width of the requested overlay.
          required: true
          schema:
            type: integer
            format: int32
        - name: height
          in: path
          description: The height of the requested overlay.
          required: true
          schema:
            type: integer
            format: int32
        - name: direction
          in: query
          description: The direction of travel.
          required: true
          schema:
            type: string
            enum:
              - Average
              - From
              - To
        - name: travelTimeInterval
          in: query
          description: The total minutes between the travel time bands
          required: true
          schema:
            type: integer
            format: int32
        - name: compareType
          in: query
          required: true
          schema:
            type: string
        - name: compareValue
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/System.Object'
            application/xml:
              schema:
                $ref: '#/components/schemas/System.Object'
            text/json:
              schema:
                $ref: '#/components/schemas/System.Object'
            text/xml:
              schema:
                $ref: '#/components/schemas/System.Object'
      deprecated: false
      tags:
        - TravelTime
  '/TravelTimes/overlay/{z}/mapcenter/{mapCenterLat}/{mapCenterLon}/pinlocation/{pinLat}/{pinLon}/dimensions/{width}/{height}':
    get:
      operationId: TravelTime_GetOverlay
      summary: Gets TravelTime overlay
      description: Gets the TravelTime overlay.
      parameters:
        - name: z
          in: path
          description: The zoom level.
          required: true
          schema:
            type: integer
            format: int32
        - name: pinLat
          in: path
          description: The latitude of the pin.
          required: true
          schema:
            type: number
            format: double
        - name: pinLon
          in: path
          description: The longitude of the pin.
          required: true
          schema:
            type: number
            format: double
        - name: mapCenterLat
          in: path
          description: The map center latitude.
          required: true
          schema:
            type: number
            format: double
        - name: mapCenterLon
          in: path
          description: The map center longitude.
          required: true
          schema:
            type: number
            format: double
        - name: scenarioTitle
          in: query
          description: The title of the scenario.
          required: true
          schema:
            type: string
        - name: timeOfDayId
          in: query
          description: The id for the time of day (AM/INTER/PM)
          required: true
          schema:
            type: string
        - name: modeId
          in: query
          description: The id of the mode.
          required: true
          schema:
            type: string
        - name: width
          in: path
          description: The width of the requested overlay.
          required: true
          schema:
            type: integer
            format: int32
        - name: height
          in: path
          description: The height of the requested overlay.
          required: true
          schema:
            type: integer
            format: int32
        - name: direction
          in: query
          description: The direction of travel.
          required: true
          schema:
            type: string
            enum:
              - Average
              - From
              - To
        - name: travelTimeInterval
          in: query
          description: The total minutes between the travel time bands
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/System.Object'
            application/xml:
              schema:
                $ref: '#/components/schemas/System.Object'
            text/json:
              schema:
                $ref: '#/components/schemas/System.Object'
            text/xml:
              schema:
                $ref: '#/components/schemas/System.Object'
      deprecated: false
      tags:
        - TravelTime
  '/Vehicle/{ids}/Arrivals':
    get:
      operationId: Vehicle_Get
      summary: Gets predictions by vehicle Id's
      description: Gets the predictions for a given list of vehicle Id's.
      parameters:
        - name: ids
          in: path
          description: 'A comma-separated list of vehicle ids e.g. LX58CFV,LX11AZB,LX58CFE. Max approx. 25 ids.'
          required: true
          schema:
            type: array
            items:
              type: string
          explode: false
          style: simple
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.Prediction'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.Prediction'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.Prediction'
            text/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.Prediction'
      deprecated: false
      tags:
        - Vehicle
components:
  schemas:
    System.Data.Spatial.DbGeography:
      type: object
      properties:
        geography:
          $ref: '#/components/schemas/System.Data.Spatial.DbGeographyWellKnownValue'
    System.Data.Spatial.DbGeographyWellKnownValue:
      type: object
      properties:
        coordinateSystemId:
          type: integer
          format: int32
        wellKnownBinary:
          type: string
          format: byte
          pattern: '^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$'
        wellKnownText:
          type: string
    System.Object:
      type: object
    Tfl.Api.Common.JourneyPlanner.JpElevation:
      type: object
      properties:
        distance:
          type: integer
          format: int32
        endLat:
          type: number
          format: double
        endLon:
          type: number
          format: double
        gradient:
          type: number
          format: double
        heightFromPreviousPoint:
          type: integer
          format: int32
        startLat:
          type: number
          format: double
        startLon:
          type: number
          format: double
    Tfl.Api.Presentation.Entities.AccidentStats.AccidentDetail:
      type: object
      properties:
        borough:
          type: string
        casualties:
          type: array
          items:
            $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.AccidentStats.Casualty'
        date:
          type: string
          format: date-time
        id:
          type: integer
          format: int32
        lat:
          type: number
          format: double
        location:
          type: string
        lon:
          type: number
          format: double
        severity:
          type: string
        vehicles:
          type: array
          items:
            $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.AccidentStats.Vehicle'
    Tfl.Api.Presentation.Entities.AccidentStats.Casualty:
      type: object
      properties:
        age:
          type: integer
          format: int32
        ageBand:
          type: string
        class:
          type: string
        mode:
          type: string
        severity:
          type: string
    Tfl.Api.Presentation.Entities.AccidentStats.Vehicle:
      type: object
      properties:
        type:
          type: string
    Tfl.Api.Presentation.Entities.ActiveServiceType:
      type: object
      properties:
        mode:
          type: string
        serviceType:
          type: string
    Tfl.Api.Presentation.Entities.AdditionalProperties:
      type: object
      properties:
        category:
          type: string
        key:
          type: string
        modified:
          type: string
          format: date-time
        sourceSystemKey:
          type: string
        value:
          type: string
    Tfl.Api.Presentation.Entities.ArrivalDeparture:
      description: DTO to capture the prediction details
      type: object
      properties:
        cause:
          description: Reason for cancellation or delay
          type: string
        departureStatus:
          description: Status of departure
          type: string
          enum:
            - OnTime
            - Delayed
            - Cancelled
            - NotStoppingAtStation
        destinationName:
          description: Name of the destination
          type: string
        destinationNaptanId:
          description: Naptan Identifier for the prediction's destination
          type: string
        estimatedTimeOfArrival:
          description: Estimated time of arrival
          type: string
          format: date-time
        estimatedTimeOfDeparture:
          description: Estimated time of arrival
          type: string
          format: date-time
        minutesAndSecondsToArrival:
          description: Estimated time of arrival
          type: string
        minutesAndSecondsToDeparture:
          description: Estimated time of arrival
          type: string
        naptanId:
          description: Identifier for the prediction
          type: string
        platformName:
          description: 'Platform name (for bus, this is the stop letter)'
          type: string
        scheduledTimeOfArrival:
          description: Estimated time of arrival
          type: string
          format: date-time
        scheduledTimeOfDeparture:
          description: Estimated time of arrival
          type: string
          format: date-time
        stationName:
          description: Station name
          type: string
        timing:
          $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.PredictionTiming'
    Tfl.Api.Presentation.Entities.Bay:
      type: object
      properties:
        bayCount:
          type: integer
          format: int32
        bayType:
          type: string
        free:
          type: integer
          format: int32
        occupied:
          type: integer
          format: int32
    Tfl.Api.Presentation.Entities.BikePointOccupancy:
      description: Bike point occupancy
      type: object
      properties:
        bikesCount:
          description: Total bike counts
          type: integer
          format: int32
        eBikesCount:
          description: Total ebikes count
          type: integer
          format: int32
        emptyDocks:
          description: Empty docks
          type: integer
          format: int32
        id:
          description: Id of the bike point such as BikePoints_1
          type: string
        name:
          description: Name / Common name of the bike point
          type: string
        standardBikesCount:
          description: Total standard bikes count
          type: integer
          format: int32
        totalDocks:
          description: Total docks available
          type: integer
          format: int32
    Tfl.Api.Presentation.Entities.CarParkOccupancy:
      type: object
      properties:
        bays:
          type: array
          items:
            $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.Bay'
        carParkDetailsUrl:
          type: string
        id:
          type: string
        name:
          type: string
    Tfl.Api.Presentation.Entities.ChargeConnectorOccupancy:
      description: ''
      type: object
      properties:
        id:
          description: ''
          type: integer
          format: int32
        sourceSystemPlaceId:
          description: ''
          type: string
        status:
          description: ''
          type: string
    Tfl.Api.Presentation.Entities.Crowding:
      type: object
      properties:
        passengerFlows:
          description: Busiest times at a station (static information)
          type: array
          items:
            $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.PassengerFlow'
        trainLoadings:
          description: 'Train Loading on a scale 1-6, 1 being "Very quiet" and 6 being "Exceptionally busy" (static information)'
          type: array
          items:
            $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.TrainLoading'
    Tfl.Api.Presentation.Entities.DisruptedPoint:
      type: object
      properties:
        additionalInformation:
          type: string
        appearance:
          type: string
        atcoCode:
          type: string
        commonName:
          type: string
        description:
          type: string
        fromDate:
          type: string
          format: date-time
        mode:
          type: string
        stationAtcoCode:
          type: string
        toDate:
          type: string
          format: date-time
        type:
          type: string
    Tfl.Api.Presentation.Entities.DisruptedRoute:
      description: keep old RouteSection name so as not to break contract
      type: object
      properties:
        destinationName:
          description: The name of the Destination StopPoint
          type: string
        direction:
          description: Inbound or Outbound
          type: string
        id:
          description: The Id of the route
          type: string
        isEntireRouteSection:
          description: Whether this represents the entire route section
          type: boolean
        lineId:
          description: The Id of the Line
          type: string
        lineString:
          description: The co-ordinates of the route's path as a geoJSON lineString
          type: string
        name:
          description: Name such as "72"
          type: string
        originationName:
          description: The name of the Origin StopPoint
          type: string
        routeCode:
          description: The route code
          type: string
        routeSectionNaptanEntrySequence:
          type: array
          items:
            $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.RouteSectionNaptanEntrySequence'
        validFrom:
          description: The DateTime that the Service containing this Route is valid from.
          type: string
          format: date-time
        validTo:
          description: The DateTime that the Service containing this Route is valid until.
          type: string
          format: date-time
        via:
          $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.RouteSectionNaptanEntrySequence'
    Tfl.Api.Presentation.Entities.Disruption:
      description: Represents a disruption to a route within the transport network.
      type: object
      properties:
        additionalInfo:
          description: Gets or sets the additionaInfo of this disruption.
          type: string
        affectedRoutes:
          description: Gets or sets the routes affected by this disruption
          type: array
          items:
            $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.DisruptedRoute'
        affectedStops:
          description: Gets or sets the stops affected by this disruption
          type: array
          items:
            $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.StopPoint'
        category:
          description: Gets or sets the category of this dispruption.
          type: string
          enum:
            - Undefined
            - RealTime
            - PlannedWork
            - Information
            - Event
            - Crowding
            - StatusAlert
        categoryDescription:
          description: Gets or sets the description of the category.
          type: string
        closureText:
          description: Text describing the closure type
          type: string
        created:
          description: Gets or sets the date/time when this disruption was created.
          type: string
          format: date-time
        description:
          description: Gets or sets the description of this disruption.
          type: string
        lastUpdate:
          description: Gets or sets the date/time when this disruption was last updated.
          type: string
          format: date-time
        summary:
          description: Gets or sets the summary of this disruption.
          type: string
        type:
          description: Gets or sets the disruption type of this dispruption.
          type: string
    Tfl.Api.Presentation.Entities.Identifier:
      type: object
      properties:
        crowding:
          $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.Crowding'
        fullName:
          type: string
        id:
          type: string
        motType:
          type: string
        name:
          type: string
        network:
          type: string
        routeType:
          type: string
          enum:
            - Unknown
            - All
            - Cycle Superhighways
            - Quietways
            - Cycleways
            - Mini-Hollands
            - Central London Grid
            - Streetspace Route
        status:
          type: string
          enum:
            - Unknown
            - All
            - Open
            - In Progress
            - Planned
            - Planned - Subject to feasibility and consultation.
            - Not Open
        type:
          type: string
        uri:
          type: string
    Tfl.Api.Presentation.Entities.Instruction:
      type: object
      properties:
        detailed:
          type: string
        steps:
          type: array
          items:
            $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.InstructionStep'
        summary:
          type: string
    Tfl.Api.Presentation.Entities.InstructionStep:
      type: object
      properties:
        cumulativeDistance:
          type: integer
          format: int32
        cumulativeTravelTime:
          type: integer
          format: int32
        description:
          type: string
        descriptionHeading:
          type: string
        distance:
          type: integer
          format: int32
        latitude:
          type: number
          format: double
        longitude:
          type: number
          format: double
        pathAttribute:
          $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.PathAttribute'
        skyDirection:
          type: integer
          format: int32
        skyDirectionDescription:
          type: string
          enum:
            - North
            - NorthEast
            - East
            - SouthEast
            - South
            - SouthWest
            - West
            - NorthWest
        streetName:
          type: string
        trackType:
          type: string
          enum:
            - CycleSuperHighway
            - CanalTowpath
            - QuietRoad
            - ProvisionForCyclists
            - BusyRoads
            - None
            - PushBike
            - Quietway
        turnDirection:
          type: string
    Tfl.Api.Presentation.Entities.Interval:
      type: object
      properties:
        stopId:
          type: string
        timeToArrival:
          type: number
          format: double
    Tfl.Api.Presentation.Entities.JourneyPlanner.Fare:
      type: object
      properties:
        chargeLevel:
          type: string
        chargeProfileName:
          type: string
        cost:
          type: integer
          format: int32
        highZone:
          type: integer
          format: int32
        isHopperFare:
          type: boolean
        lowZone:
          type: integer
          format: int32
        offPeak:
          type: integer
          format: int32
        peak:
          type: integer
          format: int32
        taps:
          type: array
          items:
            $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.JourneyPlanner.FareTap'
    Tfl.Api.Presentation.Entities.JourneyPlanner.FareCaveat:
      type: object
      properties:
        text:
          type: string
        type:
          type: string
    Tfl.Api.Presentation.Entities.JourneyPlanner.FareTap:
      type: object
      properties:
        atcoCode:
          type: string
        tapDetails:
          $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.JourneyPlanner.FareTapDetails'
    Tfl.Api.Presentation.Entities.JourneyPlanner.FareTapDetails:
      type: object
      properties:
        busRouteId:
          type: string
        hostDeviceType:
          type: string
        modeType:
          type: string
        nationalLocationCode:
          type: integer
          format: int32
        tapTimestamp:
          type: string
          format: date-time
        validationType:
          type: string
    Tfl.Api.Presentation.Entities.JourneyPlanner.ItineraryResult:
      description: A DTO representing a list of possible journeys.
      type: object
      properties:
        cycleHireDockingStationData:
          $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.JourneyPlanner.JourneyPlannerCycleHireDockingStationData'
        journeyVector:
          $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.JourneyPlanner.JourneyVector'
        journeys:
          type: array
          items:
            $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.JourneyPlanner.Journey'
        lines:
          type: array
          items:
            $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.Line'
        recommendedMaxAgeMinutes:
          type: integer
          format: int32
        searchCriteria:
          $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.JourneyPlanner.SearchCriteria'
        stopMessages:
          type: array
          items:
            type: string
    Tfl.Api.Presentation.Entities.JourneyPlanner.Journey:
      description: Object that represents an end to end journey (see schematic).
      type: object
      properties:
        arrivalDateTime:
          type: string
          format: date-time
        duration:
          type: integer
          format: int32
        fare:
          $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.JourneyPlanner.JourneyFare'
        legs:
          type: array
          items:
            $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.JourneyPlanner.Leg'
        startDateTime:
          type: string
          format: date-time
    Tfl.Api.Presentation.Entities.JourneyPlanner.JourneyFare:
      type: object
      properties:
        caveats:
          type: array
          items:
            $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.JourneyPlanner.FareCaveat'
        fares:
          type: array
          items:
            $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.JourneyPlanner.Fare'
        totalCost:
          type: integer
          format: int32
    Tfl.Api.Presentation.Entities.JourneyPlanner.JourneyPlannerCycleHireDockingStationData:
      type: object
      properties:
        destinationId:
          type: string
        destinationNumberOfBikes:
          type: integer
          format: int32
        destinationNumberOfEmptySlots:
          type: integer
          format: int32
        originId:
          type: string
        originNumberOfBikes:
          type: integer
          format: int32
        originNumberOfEmptySlots:
          type: integer
          format: int32
    Tfl.Api.Presentation.Entities.JourneyPlanner.JourneyVector:
      type: object
      properties:
        from:
          type: string
        to:
          type: string
        uri:
          type: string
        via:
          type: string
    Tfl.Api.Presentation.Entities.JourneyPlanner.Leg:
      type: object
      properties:
        arrivalPoint:
          $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.Point'
        arrivalTime:
          type: string
          format: date-time
        departurePoint:
          $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.Point'
        departureTime:
          type: string
          format: date-time
        disruptions:
          type: array
          items:
            $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.Disruption'
        distance:
          type: number
          format: double
        duration:
          type: integer
          format: int32
        hasFixedLocations:
          type: boolean
          readOnly: true
        instruction:
          $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.Instruction'
        interChangeDuration:
          type: string
        interChangePosition:
          type: string
        isDisrupted:
          type: boolean
          readOnly: true
        mode:
          $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.Identifier'
        obstacles:
          type: array
          items:
            $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.JourneyPlanner.Obstacle'
        path:
          $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.JourneyPlanner.Path'
        plannedWorks:
          type: array
          items:
            $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.JourneyPlanner.PlannedWork'
        routeOptions:
          type: array
          items:
            $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.JourneyPlanner.RouteOption'
        scheduledArrivalTime:
          type: string
          format: date-time
        scheduledDepartureTime:
          type: string
          format: date-time
        speed:
          type: string
    Tfl.Api.Presentation.Entities.JourneyPlanner.Obstacle:
      type: object
      properties:
        incline:
          type: string
        position:
          type: string
        stopId:
          type: integer
          format: int32
        type:
          type: string
    Tfl.Api.Presentation.Entities.JourneyPlanner.Path:
      type: object
      properties:
        elevation:
          type: array
          items:
            $ref: '#/components/schemas/Tfl.Api.Common.JourneyPlanner.JpElevation'
        lineString:
          type: string
        stopPoints:
          type: array
          items:
            $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.Identifier'
    Tfl.Api.Presentation.Entities.JourneyPlanner.PlannedWork:
      type: object
      properties:
        createdDateTime:
          type: string
          format: date-time
        description:
          type: string
        id:
          type: string
        lastUpdateDateTime:
          type: string
          format: date-time
    Tfl.Api.Presentation.Entities.JourneyPlanner.RouteOption:
      type: object
      properties:
        direction:
          description: 'The direction of the route, i.e. outbound or inbound.'
          type: string
        directions:
          type: array
          items:
            type: string
        id:
          description: The Id of the route
          type: string
        lineIdentifier:
          $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.Identifier'
        name:
          description: Name such as "72"
          type: string
    Tfl.Api.Presentation.Entities.JourneyPlanner.SearchCriteria:
      type: object
      properties:
        dateTime:
          type: string
          format: date-time
        dateTimeType:
          type: string
          enum:
            - Arriving
            - Departing
        timeAdjustments:
          $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.JourneyPlanner.TimeAdjustments'
    Tfl.Api.Presentation.Entities.JourneyPlanner.TimeAdjustment:
      type: object
      properties:
        date:
          type: string
        time:
          type: string
        timeIs:
          type: string
        uri:
          type: string
    Tfl.Api.Presentation.Entities.JourneyPlanner.TimeAdjustments:
      type: object
      properties:
        earlier:
          $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.JourneyPlanner.TimeAdjustment'
        earliest:
          $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.JourneyPlanner.TimeAdjustment'
        later:
          $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.JourneyPlanner.TimeAdjustment'
        latest:
          $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.JourneyPlanner.TimeAdjustment'
    Tfl.Api.Presentation.Entities.KnownJourney:
      type: object
      properties:
        hour:
          type: string
        intervalId:
          type: integer
          format: int32
        minute:
          type: string
    Tfl.Api.Presentation.Entities.Line:
      type: object
      properties:
        created:
          type: string
          format: date-time
        crowding:
          $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.Crowding'
        disruptions:
          type: array
          items:
            $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.Disruption'
        id:
          type: string
        lineStatuses:
          type: array
          items:
            $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.LineStatus'
        modeName:
          type: string
        modified:
          type: string
          format: date-time
        name:
          type: string
        routeSections:
          type: array
          items:
            $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.MatchedRoute'
        serviceTypes:
          type: array
          items:
            $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.LineServiceTypeInfo'
    Tfl.Api.Presentation.Entities.LineGroup:
      type: object
      properties:
        lineIdentifier:
          type: array
          items:
            type: string
        naptanIdReference:
          type: string
        stationAtcoCode:
          type: string
    Tfl.Api.Presentation.Entities.LineModeGroup:
      type: object
      properties:
        lineIdentifier:
          type: array
          items:
            type: string
        modeName:
          type: string
    Tfl.Api.Presentation.Entities.LineRouteSection:
      type: object
      properties:
        destination:
          type: string
        direction:
          type: string
        fromStation:
          type: string
        routeId:
          type: integer
          format: int32
        serviceType:
          type: string
        toStation:
          type: string
        vehicleDestinationText:
          type: string
    Tfl.Api.Presentation.Entities.LineServiceType:
      type: object
      properties:
        lineName:
          type: string
        lineSpecificServiceTypes:
          type: array
          items:
            $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.LineSpecificServiceType'
    Tfl.Api.Presentation.Entities.LineServiceTypeInfo:
      type: object
      properties:
        name:
          type: string
        uri:
          type: string
    Tfl.Api.Presentation.Entities.LineSpecificServiceType:
      type: object
      properties:
        serviceType:
          $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.LineServiceTypeInfo'
        stopServesServiceType:
          type: boolean
    Tfl.Api.Presentation.Entities.LineStatus:
      type: object
      properties:
        created:
          type: string
          format: date-time
        disruption:
          $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.Disruption'
        id:
          type: integer
          format: int32
        lineId:
          type: string
        modified:
          type: string
          format: date-time
        reason:
          type: string
        statusSeverity:
          type: integer
          format: int32
        statusSeverityDescription:
          type: string
        validityPeriods:
          type: array
          items:
            $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.ValidityPeriod'
    Tfl.Api.Presentation.Entities.MatchedRoute:
      description: Description of a Route used in Route search results.
      type: object
      properties:
        destination:
          description: The Id (NaPTAN code) or the Destination StopPoint
          type: string
        destinationName:
          description: The name of the Destination StopPoint
          type: string
        direction:
          description: Inbound or Outbound
          type: string
        name:
          description: Name such as "72"
          type: string
        originationName:
          description: The name of the Origin StopPoint
          type: string
        originator:
          description: The Id (NaPTAN code) of the Origin StopPoint
          type: string
        routeCode:
          description: The route code
          type: string
        serviceType:
          description: Regular or Night
          type: string
        validFrom:
          description: The DateTime that the Service containing this Route is valid from.
          type: string
          format: date-time
        validTo:
          description: The DateTime that the Service containing this Route is valid until.
          type: string
          format: date-time
    Tfl.Api.Presentation.Entities.MatchedRouteSections:
      type: object
      properties:
        id:
          type: integer
          format: int32
    Tfl.Api.Presentation.Entities.MatchedStop:
      type: object
      properties:
        accessibilitySummary:
          type: string
        direction:
          type: string
        hasDisruption:
          type: boolean
        icsId:
          type: string
        id:
          type: string
        lat:
          type: number
          format: double
        lines:
          type: array
          items:
            $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.Identifier'
        lon:
          type: number
          format: double
        modes:
          type: array
          items:
            type: string
        name:
          type: string
        parentId:
          type: string
        routeId:
          type: integer
          format: int32
        stationId:
          type: string
        status:
          type: boolean
        stopLetter:
          type: string
        stopType:
          type: string
        topMostParentId:
          type: string
        towards:
          type: string
        url:
          type: string
        zone:
          type: string
    Tfl.Api.Presentation.Entities.Mode:
      type: object
      properties:
        isFarePaying:
          type: boolean
        isScheduledService:
          type: boolean
        isTflService:
          type: boolean
        modeName:
          type: string
        motType:
          type: string
        network:
          type: string
    Tfl.Api.Presentation.Entities.OrderedRoute:
      type: object
      properties:
        name:
          type: string
        naptanIds:
          type: array
          items:
            type: string
        serviceType:
          type: string
    Tfl.Api.Presentation.Entities.PassengerFlow:
      type: object
      properties:
        timeSlice:
          description: 'Time in 24hr format with 15 minute intervals e.g. 0500-0515, 0515-0530 etc.'
          type: string
        value:
          description: Count of passenger flow towards a platform
          type: integer
          format: int32
    Tfl.Api.Presentation.Entities.PathAttribute:
      type: object
      properties:
        name:
          type: string
        value:
          type: string
    Tfl.Api.Presentation.Entities.Period:
      type: object
      properties:
        frequency:
          $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.ServiceFrequency'
        fromTime:
          $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.TwentyFourHourClockTime'
        toTime:
          $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.TwentyFourHourClockTime'
        type:
          type: string
          enum:
            - Normal
            - FrequencyHours
            - FrequencyMinutes
            - Unknown
    Tfl.Api.Presentation.Entities.Place:
      type: object
      properties:
        additionalProperties:
          description: A bag of additional key/value pairs with extra information about this place.
          type: array
          items:
            $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.AdditionalProperties'
        children:
          type: array
          items:
            $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.Place'
        childrenUrls:
          type: array
          items:
            type: string
        commonName:
          description: A human readable name.
          type: string
        distance:
          description: 'The distance of the place from its search point, if this is the result of a geographical search, otherwise zero.'
          type: number
          format: double
        id:
          description: A unique identifier.
          type: string
        lat:
          description: WGS84 latitude of the location.
          type: number
          format: double
        lon:
          description: WGS84 longitude of the location.
          type: number
          format: double
        placeType:
          description: The type of Place. See /Place/Meta/placeTypes for possible values.
          type: string
        url:
          description: The unique location of this resource.
          type: string
    Tfl.Api.Presentation.Entities.PlaceCategory:
      type: object
      properties:
        availableKeys:
          type: array
          items:
            type: string
        category:
          type: string
    Tfl.Api.Presentation.Entities.Point:
      description: Represents a point located at a latitude and longitude using the WGS84 co-ordinate system.
      type: object
      properties:
        lat:
          description: WGS84 latitude of the location.
          type: number
          format: double
        lon:
          description: WGS84 longitude of the location.
          type: number
          format: double
    Tfl.Api.Presentation.Entities.Prediction:
      description: DTO to capture the prediction details
      type: object
      properties:
        bearing:
          description: Bearing (between 0 to 359)
          type: string
        currentLocation:
          description: The current location of the vehicle.
          type: string
        destinationName:
          description: Name of the destination
          type: string
        destinationNaptanId:
          description: Naptan Identifier for the prediction's destination
          type: string
        direction:
          description: Direction (unified to inbound/outbound)
          type: string
        expectedArrival:
          description: The expected arrival time of the vehicle at the stop/station
          type: string
          format: date-time
        id:
          description: The identitier for the prediction
          type: string
        lineId:
          description: Unique identifier for the Line
          type: string
        lineName:
          description: Line Name
          type: string
        modeName:
          description: The mode name of the station/line the prediction relates to
          type: string
        naptanId:
          description: Identifier for the prediction
          type: string
        operationType:
          description: 'The type of the operation (1: is new or has been updated, 2: should be deleted from any client cache)'
          type: integer
          format: int32
        platformName:
          description: 'Platform name (for bus, this is the stop letter)'
          type: string
        stationName:
          description: Station name
          type: string
        timeToLive:
          description: The expiry time for the prediction
          type: string
          format: date-time
        timeToStation:
          description: Prediction of the Time to station in seconds
          type: integer
          format: int32
        timestamp:
          description: Timestamp for when the prediction was inserted/modified (source column drives what objects are broadcast on each iteration)
          type: string
          format: date-time
        timing:
          $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.PredictionTiming'
        towards:
          description: Routing information or other descriptive text about the path of the vehicle towards the destination
          type: string
        vehicleId:
          description: 'The actual vehicle in transit (for train modes, the leading car of the rolling set)'
          type: string
    Tfl.Api.Presentation.Entities.PredictionTiming:
      type: object
      properties:
        countdownServerAdjustment:
          type: string
        insert:
          type: string
          format: date-time
        read:
          type: string
          format: date-time
        received:
          type: string
          format: date-time
        sent:
          type: string
          format: date-time
        source:
          type: string
          format: date-time
    Tfl.Api.Presentation.Entities.RoadCorridor:
      type: object
      properties:
        bounds:
          description: 'The Bounds of the Corridor, given by the south-east followed by the north-west co-ordinate pair in geoJSON format e.g. "[[-1.241531,51.242151],[1.641223,53.765721]]"'
          type: string
        displayName:
          description: The display name of the Corridor e.g. "North Circular (A406)". This may be identical to the Id.
          type: string
        envelope:
          description: 'The Envelope of the Corridor, given by the corner co-ordinates of a rectangular (four-point) polygon in geoJSON format e.g. "[[-1.241531,51.242151],[-1.241531,53.765721],[1.641223,53.765721],[1.641223,51.242151]]"'
          type: string
        group:
          description: 'The group name of the Corridor e.g. "Central London". Most corridors are not grouped, in which case this field can be null.'
          type: string
        id:
          description: The Id of the Corridor e.g. "A406"
          type: string
        statusAggregationEndDate:
          description: 'The end of the period over which status has been aggregated, or null if this is the current corridor status.'
          type: string
          format: date-time
        statusAggregationStartDate:
          description: 'The start of the period over which status has been aggregated, or null if this is the current corridor status.'
          type: string
          format: date-time
        statusSeverity:
          description: Standard multi-mode status severity code
          type: string
        statusSeverityDescription:
          description: Description of the status severity as applied to RoadCorridors
          type: string
        url:
          description: URL to retrieve this Corridor.
          type: string
    Tfl.Api.Presentation.Entities.RoadDisruption:
      type: object
      properties:
        category:
          description: 'Describes the nature of disruption e.g. Traffic Incidents, Works'
          type: string
        comments:
          description: 'Full text of comments describing the disruption, including details of any road closures and diversions, where appropriate.'
          type: string
        corridorIds:
          description: 'The Ids of affected corridors, if any.'
          type: array
          items:
            type: string
        currentUpdate:
          description: 'Text of the most recent update from the LSTCC on the state of the disruption, including the current traffic impact and any advice to road users.'
          type: string
        currentUpdateDateTime:
          description: 'The time when the last CurrentUpdate description was recorded, or null if no CurrentUpdate has been applied.'
          type: string
          format: date-time
        endDateTime:
          description: 'The date and time on which the disruption ended. For planned disruptions, this date will have a valid value. For unplanned disruptions in progress, this field will be omitted.'
          type: string
          format: date-time
        geography:
          $ref: '#/components/schemas/System.Data.Spatial.DbGeography'
        geometry:
          $ref: '#/components/schemas/System.Data.Spatial.DbGeography'
        hasClosures:
          description: 'True if any of the affected Streets have a "Full Closure" status, false otherwise. A RoadDisruption that has HasClosures is considered a Severe or Serious disruption for severity filtering purposes.'
          type: boolean
        id:
          description: Unique identifier for the road disruption
          type: string
        isProvisional:
          description: True if the disruption is planned on a future date that is open to change
          type: boolean
        lastModifiedTime:
          description: The date and time on which the disruption was last modified in the system. This information can reliably be used by a developer to quickly compare two instances of the same disruption to determine if it has been changed.
          type: string
          format: date-time
        levelOfInterest:
          description: This describes the level of potential impact on traffic operations of the disruption. High = e.g. a one-off disruption on a major or high profile route which will require a high level of operational attention Medium = This is the default value Low = e.g. a frequently occurring disruption which is well known
          type: string
        linkText:
          description: The text of any associated link
          type: string
        linkUrl:
          description: The url of any associated link
          type: string
        location:
          description: Main road name / number (borough) or preset area name where the disruption is located. This might be useful for a map popup where space is limited.
          type: string
        ordinal:
          description: 'An ordinal of the disruption based on severity, level of interest and corridor.'
          type: integer
          format: int32
        point:
          description: 'Latitude and longitude (WGS84) of the centroid of the disruption, stored in a geoJSON-formatted string.'
          type: string
        publishEndDate:
          type: string
          format: date-time
        publishStartDate:
          description: TDM Additional properties
          type: string
          format: date-time
        recurringSchedules:
          type: array
          items:
            $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.RoadDisruptionSchedule'
        roadDisruptionImpactAreas:
          type: array
          items:
            $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.RoadDisruptionImpactArea'
        roadDisruptionLines:
          type: array
          items:
            $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.RoadDisruptionLine'
        roadProject:
          $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.RoadProject'
        severity:
          description: A description of the severity of the disruption.
          type: string
        startDateTime:
          description: 'The date and time which the disruption started. For a planned disruption (i.e. planned road works) this date will be in the future. For unplanned disruptions, this will default to the date on which the disruption was first recorded, but may be adjusted by the operator.'
          type: string
          format: date-time
        status:
          description: 'This describes the status of the disruption. Active = currently in progress Active Long Term = currently in progress and long term Scheduled = scheduled to start within the next 180 days Recurring Works = planned maintenance works that follow a regular routine or pattern and whose next occurrence is to start within the next 180 days. Recently Cleared = recently cleared in the last 24 hours Note that the status of Scheduled or Recurring Works disruptions will change to Active when they start, and will change status again when they end.'
          type: string
        streets:
          description: A collection of zero or more streets affected by the disruption.
          type: array
          items:
            $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.Street'
        subCategory:
          description: 'Describes the sub-category of disruption e.g. Collapsed Manhole, Abnormal Load'
          type: string
        timeFrame:
          type: string
        url:
          description: URL to retrieve this road disruption
          type: string
    Tfl.Api.Presentation.Entities.RoadDisruptionImpactArea:
      type: object
      properties:
        endDate:
          type: string
          format: date-time
        endTime:
          type: string
        id:
          type: integer
          format: int32
        polygon:
          $ref: '#/components/schemas/System.Data.Spatial.DbGeography'
        roadDisruptionId:
          type: string
        startDate:
          type: string
          format: date-time
        startTime:
          type: string
    Tfl.Api.Presentation.Entities.RoadDisruptionLine:
      type: object
      properties:
        endDate:
          type: string
          format: date-time
        endTime:
          type: string
        id:
          type: integer
          format: int32
        isDiversion:
          type: boolean
        multiLineString:
          $ref: '#/components/schemas/System.Data.Spatial.DbGeography'
        roadDisruptionId:
          type: string
        startDate:
          type: string
          format: date-time
        startTime:
          type: string
    Tfl.Api.Presentation.Entities.RoadDisruptionSchedule:
      type: object
      properties:
        endTime:
          type: string
          format: date-time
        startTime:
          type: string
          format: date-time
    Tfl.Api.Presentation.Entities.RoadProject:
      type: object
      properties:
        boroughsBenefited:
          type: array
          items:
            type: string
        constructionEndDate:
          type: string
          format: date-time
        constructionStartDate:
          type: string
          format: date-time
        consultationEndDate:
          type: string
          format: date-time
        consultationPageUrl:
          type: string
        consultationStartDate:
          type: string
          format: date-time
        contactEmail:
          type: string
        contactName:
          type: string
        cycleSuperhighwayId:
          type: string
        externalPageUrl:
          type: string
        phase:
          type: string
          enum:
            - Unscoped
            - Concept
            - ConsultationEnded
            - Consultation
            - Construction
            - Complete
        projectDescription:
          type: string
        projectId:
          type: string
        projectName:
          type: string
        projectPageUrl:
          type: string
        projectSummaryPageUrl:
          type: string
        schemeName:
          type: string
    Tfl.Api.Presentation.Entities.RouteSearchMatch:
      type: object
      properties:
        id:
          type: string
        lat:
          type: number
          format: double
        lineId:
          type: string
        lineName:
          type: string
        lineRouteSection:
          type: array
          items:
            $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.LineRouteSection'
        lon:
          type: number
          format: double
        matchedRouteSections:
          type: array
          items:
            $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.MatchedRouteSections'
        matchedStops:
          type: array
          items:
            $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.MatchedStop'
        mode:
          type: string
        name:
          type: string
        url:
          type: string
    Tfl.Api.Presentation.Entities.RouteSearchResponse:
      type: object
      properties:
        input:
          type: string
        searchMatches:
          type: array
          items:
            $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.RouteSearchMatch'
    Tfl.Api.Presentation.Entities.RouteSectionNaptanEntrySequence:
      type: object
      properties:
        ordinal:
          type: integer
          format: int32
        stopPoint:
          $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.StopPoint'
    Tfl.Api.Presentation.Entities.RouteSequence:
      type: object
      properties:
        direction:
          type: string
        isOutboundOnly:
          type: boolean
        lineId:
          type: string
        lineName:
          type: string
        lineStrings:
          type: array
          items:
            type: string
        mode:
          type: string
        orderedLineRoutes:
          type: array
          items:
            $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.OrderedRoute'
        stations:
          type: array
          items:
            $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.MatchedStop'
        stopPointSequences:
          type: array
          items:
            $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.StopPointSequence'
    Tfl.Api.Presentation.Entities.Schedule:
      type: object
      properties:
        firstJourney:
          $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.KnownJourney'
        knownJourneys:
          type: array
          items:
            $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.KnownJourney'
        lastJourney:
          $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.KnownJourney'
        name:
          type: string
        periods:
          type: array
          items:
            $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.Period'
    Tfl.Api.Presentation.Entities.SearchMatch:
      type: object
      properties:
        id:
          type: string
        lat:
          type: number
          format: double
        lon:
          type: number
          format: double
        name:
          type: string
        url:
          type: string
    Tfl.Api.Presentation.Entities.SearchResponse:
      type: object
      properties:
        from:
          type: integer
          format: int32
        matches:
          type: array
          items:
            $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.SearchMatch'
        maxScore:
          type: number
          format: double
        page:
          type: integer
          format: int32
        pageSize:
          type: integer
          format: int32
        provider:
          type: string
        query:
          type: string
        total:
          type: integer
          format: int32
    Tfl.Api.Presentation.Entities.ServiceFrequency:
      type: object
      properties:
        highestFrequency:
          type: number
          format: double
        lowestFrequency:
          type: number
          format: double
    Tfl.Api.Presentation.Entities.StationInterval:
      type: object
      properties:
        id:
          type: string
        intervals:
          type: array
          items:
            $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.Interval'
    Tfl.Api.Presentation.Entities.StatusSeverity:
      type: object
      properties:
        description:
          type: string
        modeName:
          type: string
        severityLevel:
          type: integer
          format: int32
    Tfl.Api.Presentation.Entities.StopPoint:
      type: object
      properties:
        accessibilitySummary:
          type: string
        additionalProperties:
          description: A bag of additional key/value pairs with extra information about this place.
          type: array
          items:
            $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.AdditionalProperties'
        children:
          type: array
          items:
            $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.Place'
        childrenUrls:
          type: array
          items:
            type: string
        commonName:
          description: A human readable name.
          type: string
        distance:
          description: 'The distance of the place from its search point, if this is the result of a geographical search, otherwise zero.'
          type: number
          format: double
        fullName:
          type: string
        hubNaptanCode:
          type: string
        icsCode:
          type: string
        id:
          description: A unique identifier.
          type: string
        indicator:
          description: The indicator of the stop point e.g. "Stop K"
          type: string
        individualStopId:
          type: string
        lat:
          description: WGS84 latitude of the location.
          type: number
          format: double
        lineGroup:
          type: array
          items:
            $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.LineGroup'
        lineModeGroups:
          type: array
          items:
            $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.LineModeGroup'
        lines:
          type: array
          items:
            $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.Identifier'
        lon:
          description: WGS84 longitude of the location.
          type: number
          format: double
        modes:
          type: array
          items:
            type: string
        naptanId:
          type: string
        naptanMode:
          type: string
        placeType:
          description: The type of Place. See /Place/Meta/placeTypes for possible values.
          type: string
        platformName:
          type: string
        smsCode:
          type: string
        stationNaptan:
          type: string
        status:
          type: boolean
        stopLetter:
          description: 'The stop letter, if it could be cleansed from the Indicator e.g. "K"'
          type: string
        stopType:
          type: string
        url:
          description: The unique location of this resource.
          type: string
    Tfl.Api.Presentation.Entities.StopPointCategory:
      type: object
      properties:
        availableKeys:
          type: array
          items:
            type: string
        category:
          type: string
    Tfl.Api.Presentation.Entities.StopPointRouteSection:
      type: object
      properties:
        destinationName:
          type: string
        direction:
          type: string
        isActive:
          type: boolean
        lineId:
          type: string
        lineString:
          type: string
        mode:
          type: string
        naptanId:
          type: string
        routeSectionName:
          type: string
        serviceType:
          type: string
        validFrom:
          type: string
          format: date-time
        validTo:
          type: string
          format: date-time
        vehicleDestinationText:
          type: string
    Tfl.Api.Presentation.Entities.StopPointSequence:
      type: object
      properties:
        branchId:
          description: The id of this branch.
          type: integer
          format: int32
        direction:
          type: string
        lineId:
          type: string
        lineName:
          type: string
        nextBranchIds:
          description: The ids of the next branch(es) in the sequence. Note that the next and previous branch id can be identical in the case of a looped route e.g. the Circle line.
          type: array
          items:
            format: int32
            type: integer
        prevBranchIds:
          description: The ids of the previous branch(es) in the sequence. Note that the next and previous branch id can be identical in the case of a looped route e.g. the Circle line.
          type: array
          items:
            format: int32
            type: integer
        serviceType:
          type: string
          enum:
            - Regular
            - Night
        stopPoint:
          type: array
          items:
            $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.MatchedStop'
    Tfl.Api.Presentation.Entities.StopPointsResponse:
      description: A paged response containing StopPoints
      type: object
      properties:
        centrePoint:
          description: The centre latitude/longitude of this list of StopPoints
          type: array
          items:
            format: double
            type: number
        page:
          description: The index of this page
          type: integer
          format: int32
        pageSize:
          description: The maximum size of the page in this response i.e. the maximum number of StopPoints
          type: integer
          format: int32
        stopPoints:
          description: Collection of stop points
          type: array
          items:
            $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.StopPoint'
        total:
          description: The total number of StopPoints available across all pages
          type: integer
          format: int32
    Tfl.Api.Presentation.Entities.Street:
      type: object
      properties:
        closure:
          description: 'Type of road closure. Some example values: Open = road is open, not blocked, not closed, not restricted. It maybe that the disruption has been moved out of the carriageway. Partial Closure = road is partially blocked, closed or restricted. Full Closure = road is fully blocked or closed.'
          type: string
        directions:
          description: 'The direction of the disruption on the street. Some example values: All Directions All Approaches Clockwise Anti-Clockwise Northbound Eastbound Southbound Westbound Both Directions'
          type: string
        name:
          description: Street name
          type: string
        segments:
          description: Geographic description of the sections of this street that are affected.
          type: array
          items:
            $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.StreetSegment'
        sourceSystemId:
          description: The ID from the source system of the disruption that this street belongs to.
          type: integer
          format: int64
        sourceSystemKey:
          description: The key of the source system of the disruption that this street belongs to.
          type: string
    Tfl.Api.Presentation.Entities.StreetSegment:
      type: object
      properties:
        lineString:
          description: geoJSON formatted LineString containing two latitude/longitude (WGS84) pairs that identify the start and end points of the street segment.
          type: string
        sourceSystemId:
          description: The ID from the source system of the disruption that this street belongs to.
          type: integer
          format: int64
        sourceSystemKey:
          description: The key of the source system of the disruption that this street belongs to.
          type: string
        toid:
          description: A 16 digit unique integer identifying a OS ITN (Ordnance Survey Integrated Transport Network) road link.
          type: string
    Tfl.Api.Presentation.Entities.Timetable:
      type: object
      properties:
        departureStopId:
          type: string
        routes:
          type: array
          items:
            $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.TimetableRoute'
    Tfl.Api.Presentation.Entities.TimetableResponse:
      type: object
      properties:
        direction:
          type: string
        disambiguation:
          $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.Timetables.Disambiguation'
        lineId:
          type: string
        lineName:
          type: string
        pdfUrl:
          type: string
        stations:
          type: array
          items:
            $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.MatchedStop'
        statusErrorMessage:
          type: string
        stops:
          type: array
          items:
            $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.MatchedStop'
        timetable:
          $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.Timetable'
    Tfl.Api.Presentation.Entities.TimetableRoute:
      type: object
      properties:
        schedules:
          type: array
          items:
            $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.Schedule'
        stationIntervals:
          type: array
          items:
            $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.StationInterval'
    Tfl.Api.Presentation.Entities.Timetables.Disambiguation:
      type: object
      properties:
        disambiguationOptions:
          type: array
          items:
            $ref: '#/components/schemas/Tfl.Api.Presentation.Entities.Timetables.DisambiguationOption'
    Tfl.Api.Presentation.Entities.Timetables.DisambiguationOption:
      type: object
      properties:
        description:
          type: string
        uri:
          type: string
    Tfl.Api.Presentation.Entities.TrainLoading:
      type: object
      properties:
        direction:
          description: Direction in regards to Journey Planner i.e. inbound or outbound
          type: string
        line:
          description: The Line Name e.g. "Victoria"
          type: string
        lineDirection:
          description: 'Direction of the Line e.g. NB, SB, WB etc.'
          type: string
        naptanTo:
          description: Naptan of the adjacent station
          type: string
        platformDirection:
          description: 'Direction displayed on the platform e.g. NB, SB, WB etc.'
          type: string
        timeSlice:
          description: 'Time in 24hr format with 15 minute intervals e.g. 0500-0515, 0515-0530 etc.'
          type: string
        value:
          description: 'Scale between 1-6, 1 = Very quiet, 2 = Quiet, 3 = Fairly busy, 4 = Busy, 5 = Very busy, 6 = Exceptionally busy'
          type: integer
          format: int32
    Tfl.Api.Presentation.Entities.TwentyFourHourClockTime:
      type: object
      properties:
        hour:
          type: string
        minute:
          type: string
    Tfl.Api.Presentation.Entities.ValidityPeriod:
      description: Represents a period for which a planned works is valid.
      type: object
      properties:
        fromDate:
          description: Gets or sets the start date.
          type: string
          format: date-time
        isNow:
          description: If true is a realtime status rather than planned or info
          type: boolean
        toDate:
          description: Gets or sets the end date.
          type: string
          format: date-time
  securitySchemes:
    apiKey:
      description: API Key Authentication
      in: query
      name: app_key
      type: apiKey
    appId:
      description: Application ID
      in: query
      name: app_id
      type: apiKey
tags:
  - name: AccidentStats
  - name: AirQuality
  - name: BikePoint
  - name: Cabwise
  - name: Journey
  - name: Line
  - name: Mode
  - name: Occupancy
  - name: Place
  - name: Road
  - name: Search
  - name: StopPoint
  - name: TravelTime
  - name: Vehicle
  